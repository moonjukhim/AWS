AWSTemplateFormatVersion: '2010-09-09'
Description: Setting up a Data Lake with AWS Lake Formation.
# Parameters used in these asset creation
Parameters:
  TestUserId:
    Default: testuser
    Type: String
  AdministratorPassword:
    Type: String
    NoEcho: true
  VPCCIDR:
    Description: 'CIDR Block for VPC'
    Type: String
    Default: 10.0.0.0/16
    AllowedPattern: '^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/(3[0-2]|[1-2][0-9]|[0-9]))$'
  PubSubA:
    Description: 'Public Subnet A'
    Type: String
    Default: 10.0.1.0/24
    AllowedPattern: '^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/(3[0-2]|[1-2][0-9]|[0-9]))$'
  PubSubB:
    Description: 'Public Subnet B'
    Type: String
    Default: 10.0.2.0/24
    AllowedPattern: '^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/(3[0-2]|[1-2][0-9]|[0-9]))$'
  LabUserRoleName:
    Type: String

  Cloud9ImageId:
    Type: String
    Description: The AMI alias of the image to use with Cloud9.
    Default: amazonlinux-2-x86_64
    AllowedValues:
      - amazonlinux-1-x86_64
      - amazonlinux-2-x86_64
      - ubuntu-18.04-x86_64


  LabPoolId:
    Type: String

Conditions:
  createSubnetB: !Equals [!FindInMap [RegionMap, !Ref "AWS::Region", SubnetB], true]

Resources:
  labVPC:
    Type: 'AWS::EC2::VPC'
    Properties:
      CidrBlock: !Ref VPCCIDR
      EnableDnsSupport: true
      EnableDnsHostnames: true

  InternetGateway:
    Type: 'AWS::EC2::InternetGateway'
    DependsOn: labVPC
    Properties:
      Tags:
        - Key: Name
          Value: 'labVPC-IGW'

  AttachGateway:
    Type: 'AWS::EC2::VPCGatewayAttachment'
    Properties:
      VpcId: !Ref labVPC
      InternetGatewayId: !Ref InternetGateway

  PublicSubnetA:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref labVPC
      CidrBlock: !Ref PubSubA
      AvailabilityZone: !Select [0, !GetAZs '']
      Tags:
        - Key: Name
          Value: !Join
            - '_'
            -   - 'Public'
                - !Select [0, !GetAZs '']
                - !Ref PubSubA
        - Key: Reach
          Value: Public

  PublicSubnetB:
    Type: 'AWS::EC2::Subnet'
    Condition: createSubnetB
    Properties:
      VpcId: !Ref labVPC
      CidrBlock: !Ref PubSubB
      AvailabilityZone: !Select [1, !GetAZs '']
      Tags:
        - Key: Name
          Value: !Join
            - '_'
            -   - 'Public'
                - !Select [1, !GetAZs '']
                - !Ref PubSubB
        - Key: Reach
          Value: Public

  PublicRouteTableA:
    Type: 'AWS::EC2::RouteTable'
    DependsOn:
      - AttachGateway
    Properties:
      VpcId: !Ref labVPC
      Tags:
        - Key: Name
          Value: !Join
            - '_'
            -   - 'labVPC-Public'
                - !Sub ${VPCCIDR}

  # And add in the default route to 0.0.0.0/0
  PublicRouteIGW:
    Type: 'AWS::EC2::Route'
    Properties:
      RouteTableId: !Ref PublicRouteTableA
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  # Attach the routing table to each of the subnets
  PublicRouteTableAssociationA:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref PublicSubnetA
      RouteTableId: !Ref PublicRouteTableA

  PublicRouteTableAssociationB:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Condition: createSubnetB
    Properties:
      SubnetId: !Ref PublicSubnetB
      RouteTableId: !Ref PublicRouteTableA

  Cloud9:
    Type: AWS::Cloud9::EnvironmentEC2
    Properties:
      Name: Cloud9-Dev-Server
      # With EventEngine you use Federated login to get console access, so the owner must be the correct federated role
      OwnerArn:
        Fn::Sub: arn:${AWS::Partition}:sts::${AWS::AccountId}:assumed-role/${LabUserRoleName}/${LabPoolId}
      AutomaticStopTimeMinutes: 720
      Description: Cloud9 development environment
      InstanceType: t3.small
      ImageId: !Ref Cloud9ImageId
      SubnetId: !Ref PublicSubnetA

  DataBucket:
    Type: AWS::S3::Bucket

  AdminGlueServiceRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - glue.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSGlueServiceRole
      Path: /
      Policies:
        - PolicyName: "dataLakePol"
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - s3:PutObject
                  - s3:GetObject
                  - s3:DeleteObject
                  - lakeformation:*
                Resource: '*'
  UserGlueServiceRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - glue.amazonaws.com
                - lambda.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSGlueServiceRole
      Path: /
      Policies:
        - PolicyName: "userRole"
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - s3:PutObject
                  - s3:GetObject
                  - s3:DeleteObject
                Resource: '*'

  LakeFormationServiceRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lakeformation.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Path: /
      Policies:
        - PolicyName: "LakeFormationPol"
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - s3:PutObject
                  - s3:GetObject
                  - s3:DeleteObject
                Resource:
                  - !Sub 'arn:aws:s3:::${DataBucket}/review/*'
              - Effect: Allow
                Action:
                  - s3:ListBucket
                Resource:
                  - !Sub 'arn:aws:s3:::${DataBucket}'
#### Test Users#####

  TestUser:
    Type: AWS::IAM::User
    Properties:
      LoginProfile:
        Password: !Ref AdministratorPassword
      UserName: !Ref TestUserId
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSGlueServiceRole
      Path: /
      Policies:
        - PolicyName: dataLakePol
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - s3:PutObject
                  - s3:GetObject
                  - athena:ListDataCatalogs
                  - lakeformation:GetDataAccess
                  - lakeformation:*
                  - athena:ListWorkGroups
                  - athena:GetNamespaces
                  - athena:GetTables
                  - glue:Get*
                  - glue:Search*
                Resource: '*'
              - Effect: Allow
                Action:
                  - athena:*
                Resource: "arn:aws:athena:*:*:workgroup/primary"

###ResetLakeFormation###

  ResetLakeFormation:
    Type: Custom::ResetLakeFormation
    Properties:
      ServiceToken: !GetAtt ResetLakeFormationFunction.Arn

  ResetLakeFormationFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: ResetLakeFormation
      Handler: index.handler
      MemorySize: 128
      Timeout: 180
      Role: !GetAtt ResetLakeFormationRole.Arn
      Runtime: python3.11
      Code:
        ZipFile: !Sub |
          import boto3
          import json
          import urllib3

          http = urllib3.PoolManager()
          iam_resource = boto3.resource("iam")
          lakeformation_client = boto3.client("lakeformation")


          def send_response(event, context, status, reason, data):

              body = json.dumps({
                  "Status": status,
                  "Reason": reason,
                  "PhysicalResourceId": context.log_stream_name,
                  "StackId": event.get("StackId"),
                  "RequestId": event.get("RequestId"),
                  "LogicalResourceId": event.get("LogicalResourceId"),
                  "NoEcho": False,
                  "Data": data
              })

              http.request(
                  "PUT",
                  event.get("ResponseURL"),
                  body=body,
                  headers={
                      "Content-Type": "",
                      "Content-Length": str(len(body))
                  }
              )


          def delete_resources(name):

              role = iam_resource.Role(name=name)

              for role_policy in role.policies.all():
                  role_policy.delete()

              role.delete()

              boto3.client("lambda").delete_function(FunctionName=name)


          def handler(event, context):

              try:
                  # Only handle 'Create' requests.
                  if event.get("RequestType") == "Create":
                      lakeformation_client.put_data_lake_settings(
                          DataLakeSettings={
                              "DataLakeAdmins": [{
                                  "DataLakePrincipalIdentifier": "arn:${AWS::Partition}:iam::${AWS::AccountId}:role/ResetLakeFormation"
                              }]
                          }
                      )
                      lakeformation_client.grant_permissions(
                          Principal={"DataLakePrincipalIdentifier": "IAM_ALLOWED_PRINCIPALS"},
                          Resource={"Catalog": {}},
                          Permissions=["CREATE_DATABASE"]
                      )
                      lakeformation_client.put_data_lake_settings(
                          DataLakeSettings={
                              "DataLakeAdmins": [],
                              "CreateDatabaseDefaultPermissions": [
                                  {
                                      "Principal": {
                                          "DataLakePrincipalIdentifier": "IAM_ALLOWED_PRINCIPALS"
                                      },
                                      "Permissions": [
                                          "ALL"
                                      ]
                                  }
                              ],
                              "CreateTableDefaultPermissions": [
                                  {
                                      "Principal": {
                                          "DataLakePrincipalIdentifier": "IAM_ALLOWED_PRINCIPALS"
                                      },
                                      "Permissions": [
                                          "ALL"
                                      ]
                                  }
                              ],
                              "TrustedResourceOwners": []
                          }
                      )
                      send_response(event, context, "SUCCESS", "Lake Formation Reset", {})
                  else:
                      send_response(event, context, "SUCCESS", "No Action Performed", {})
              except Exception as exception:
                  send_response(event, context, "FAILED", str(exception), {})
              finally:
                  delete_resources(event.get("LogicalResourceId"))

  ResetLakeFormationRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: ResetLakeFormation
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
      Policies:
        - PolicyName: ResetLakeFormation
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Action:
                  - lakeformation:PutDataLakeSettings
                  - lakeformation:GrantPermissions
                  - iam:ListRoles
                Effect: Allow
                Resource:
                  - "*"
              - Action:
                  - iam:DeleteRole
                  - iam:DeleteRolePolicy
                  - iam:ListRolePolicies
                Effect: Allow
                Resource:
                  - !Sub arn:${AWS::Partition}:iam::${AWS::AccountId}:role/ResetLakeFormation
              - Action:
                  - lambda:DeleteFunction
                Effect: Allow
                Resource:
                  - !Sub arn:${AWS::Partition}:lambda:${AWS::Region}:${AWS::AccountId}:function:ResetLakeFormation



Outputs:
  Cloud9url:
    Description: This is the direct URL to use to access your Cloud9 instance
    Value: !Sub https://${AWS::Region}.console.aws.amazon.com/cloud9/ide/${Cloud9}

  SignedInRoleName:
    Description: The existing role with the name containing AWSLabsUser
    Value: !Ref LabUserRoleName

  S3Bucket:
    Description: This is the name of the S3 bucket for your account
    Value: !Ref DataBucket

  Region:
    Description: The AWS Region
    Value: !Sub ${AWS::Region}

  LoginURL:
    Value: !Sub https://${AWS::AccountId}.signin.aws.amazon.com/console?region=${AWS::Region}#

  testuser:
    Description: The userName that will be used for testing Data Permission
    Value: !Ref TestUserId

  testuserPassword:
    Description: The User password for the testuser
    Value: !Ref AdministratorPassword

# This is a map of Regions and AZ's
Mappings:
  # This needs to be updated as Regions and AZ's are added.
  RegionMap:
    af-south-1: # Cape Town
      SubnetA: true
      SubnetB: true
    ap-east-1: # Hong Kong
      SubnetA: true
      SubnetB: true
    ap-south-1: # Mumbai
      SubnetA: true
      SubnetB: true
    ap-northeast-3: # Osaka-Local
      SubnetA: true
      SubnetB: false
    ap-northeast-2: # Seoul
      SubnetA: true
      SubnetB: true
    ap-southeast-1: # Singapore
      SubnetA: true
      SubnetB: true
    ap-southeast-2: # Sydney
      SubnetA: true
      SubnetB: true
    ap-northeast-1: # Tokyo
      SubnetA: true
      SubnetB: true
    ca-central-1: # Canada (Central)
      SubnetA: true
      SubnetB: true
    eu-central-1: # Frankfurt
      SubnetA: true
      SubnetB: true
    eu-west-1: # Ireland
      SubnetA: true
      SubnetB: true
    eu-west-2: # London
      SubnetA: true
      SubnetB: true
    eu-south-1: # Milan
      SubnetA: true
      SubnetB: true
    eu-west-3: # Paris
      SubnetA: true
      SubnetB: true
    eu-north-1: # Stockholm
      SubnetA: true
      SubnetB: true
    sa-east-1: # Sao Paulo
      SubnetA: true
      SubnetB: true
    us-east-1: # N. Virginia
      SubnetA: true
      SubnetB: true
    us-east-2: # Ohio
      SubnetA: true
      SubnetB: true
    us-west-1: # N. California
      SubnetA: true
      SubnetB: true
    us-west-2: # Oregon
      SubnetA: true
      SubnetB: true
