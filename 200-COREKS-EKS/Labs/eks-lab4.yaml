AWSTemplateFormatVersion: "2010-09-09"
Description: "Running Containers on Amazon Elastic Kubernetes Service (EKS) Lab 4: Exploring Amazon EKS Communication"

Parameters:
  LabVpcCidr:
    Type: String
    Default: 10.10.0.0/16
    AllowedPattern: ^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/(1[6-9]|2[0-8]))$

  BastionHostSubnetCidr:
    Type: String
    Default: 10.10.32.0/19
    AllowedPattern: ^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/(1[6-9]|2[0-8]))$

  EksPublicSubnet1Cidr:
    Type: String
    Default: 10.10.64.0/19
    AllowedPattern: ^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/(1[6-9]|2[0-8]))$

  EksPublicSubnet2Cidr:
    Type: String
    Default: 10.10.96.0/19
    AllowedPattern: ^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/(1[6-9]|2[0-8]))$

  EksPublicSubnet3Cidr:
    Type: String
    Default: 10.10.128.0/19
    AllowedPattern: ^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/(1[6-9]|2[0-8]))$

  LatestAL2AmiId: # Locate latest Amazon Linux 2 AMI from public parameter store
    Type: "AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>"
    Default: "/aws/service/ami-amazon-linux-latest/amzn2-ami-hvm-x86_64-gp2"

  KubernetesVersion:
    Description: The Kubernetes version to deploy on the Amazon EKS cluster
    Type: String
    Default: "1.26"

  S3Url:
    Type: String
    Default: "https://aws-tc-largeobjects.s3-us-west-2.amazonaws.com/prevention/yml"
  S3Bucket:
    Type: String
    Default: "aws-tc-largeobjects"

Resources:

  # Start - Create VPC, subnets, internet gateway, and routes
  LabVpc:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref LabVpcCidr
      EnableDnsSupport: true
      EnableDnsHostnames: true
      InstanceTenancy: default
      Tags:
        - Key: Name
          Value: Lab VPC

  BastionHostSubnet:
    Type: AWS::EC2::Subnet
    DependsOn:
      - AttachGateway
    Properties:
      CidrBlock: !Ref BastionHostSubnetCidr
      VpcId: !Ref LabVpc
      MapPublicIpOnLaunch: true
      AvailabilityZone:
        Fn::Select:
          - 0
          - Fn::GetAZs: ""
      Tags:
        - Key: Name
          Value: !Sub Bastion Host Subnet - ${AWS::Region}a

  EksPublicSubnet1:
    Type: AWS::EC2::Subnet
    DependsOn: AttachGateway
    Properties:
      CidrBlock: !Ref EksPublicSubnet1Cidr
      VpcId: !Ref LabVpc
      MapPublicIpOnLaunch: true
      AvailabilityZone:
        Fn::Select:
          - 0
          - Fn::GetAZs: ""
      Tags:
        - Key: Name
          Value: !Sub EKS Public Subnet 1 - ${AWS::Region}a

  EksPublicSubnet2:
    Type: AWS::EC2::Subnet
    DependsOn: AttachGateway
    Properties:
      CidrBlock: !Ref EksPublicSubnet2Cidr
      VpcId: !Ref LabVpc
      MapPublicIpOnLaunch: true
      AvailabilityZone:
        Fn::Select:
          - 1
          - Fn::GetAZs: ""
      Tags:
        - Key: Name
          Value: !Sub EKS Public Subnet 2 - ${AWS::Region}b

  EksPublicSubnet3:
    Type: AWS::EC2::Subnet
    DependsOn: AttachGateway
    Properties:
      CidrBlock: !Ref EksPublicSubnet3Cidr
      VpcId: !Ref LabVpc
      MapPublicIpOnLaunch: true
      AvailabilityZone:
        Fn::Select:
          - 2
          - Fn::GetAZs: ""
      Tags:
        - Key: Name
          Value: !Sub EKS Public Subnet 3 - ${AWS::Region}c

  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: Internet Gateway

  AttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref LabVpc
      InternetGatewayId: !Ref InternetGateway

  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    DependsOn:
      - BastionHostSubnet
      - EksPublicSubnet1
      - EksPublicSubnet2
      - EksPublicSubnet3
    Properties:
      VpcId: !Ref LabVpc

  BastionHostSubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    DependsOn:
      - PublicRoute
    Properties:
      SubnetId: !Ref BastionHostSubnet
      RouteTableId: !Ref PublicRouteTable

  EksPublicSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    DependsOn: PublicRoute
    Properties:
      SubnetId: !Ref EksPublicSubnet1
      RouteTableId: !Ref PublicRouteTable

  EksPublicSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    DependsOn: PublicRoute
    Properties:
      SubnetId: !Ref EksPublicSubnet2
      RouteTableId: !Ref PublicRouteTable

  EksPublicSubnet3RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    DependsOn: PublicRoute
    Properties:
      SubnetId: !Ref EksPublicSubnet3
      RouteTableId: !Ref PublicRouteTable

  PublicRoute:
    Type: AWS::EC2::Route
    DependsOn: AttachGateway
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  BastionHostEip:
    Type: AWS::EC2::EIP
    Properties:
      InstanceId: !Ref BastionHost
  # End - Create VPC, subnets (bastion host, EKS public and private), internet gateway, and routes

  #Start - Create security groups
  BastionHostSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: Bastion host access
      GroupDescription: Network access rules applied to the bastion host
      VpcId: !Ref LabVpc
      SecurityGroupEgress:
        - IpProtocol: tcp
          CidrIp: 0.0.0.0/0
          FromPort: 80
          ToPort: 80
          Description: Allow HTTP connections to anywhere for downloading files
        - IpProtocol: tcp
          CidrIp: 0.0.0.0/0
          FromPort: 443
          ToPort: 443
          Description: Allow HTTPS connections to anywhere for downloading files
        - IpProtocol: tcp
          CidrIp: !Ref EksPublicSubnet1Cidr
          FromPort: 0
          ToPort: 65535
          Description: Allow connections to EKS Public Subnet 1 on any port
        - IpProtocol: tcp
          CidrIp: !Ref EksPublicSubnet2Cidr
          FromPort: 0
          ToPort: 65535
          Description: Allow connections to EKS Public Subnet 2 on any port
        - IpProtocol: tcp
          CidrIp: !Ref EksPublicSubnet3Cidr
          FromPort: 0
          ToPort: 65535
          Description: Allow connections to EKS Public Subnet 3 on any port

  ControlPlaneSecurityGroup: # Rules are populated automatically when the cluster is created
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: EKS control plane access
      GroupDescription: Cluster communication with worker nodes
      VpcId: !Ref LabVpc
      SecurityGroupIngress:
        # Allow inbound traffic from the bastion host security group on any port
        - IpProtocol: "-1"
          SourceSecurityGroupId: !Ref BastionHostSecurityGroup
          Description: Allow connections from bastion host subnet on any port
        - IpProtocol: "-1"
          CidrIp: !Ref EksPublicSubnet1Cidr
          Description: Allow connections from EKS Public Subnet 1 on any port
        - IpProtocol: "-1"
          CidrIp: !Ref EksPublicSubnet2Cidr
          Description: Allow connections from EKS Public Subnet 2 on any port
        - IpProtocol: "-1"
          CidrIp: !Ref EksPublicSubnet3Cidr
          Description: Allow connections from EKS Public Subnet 3 on any port
  # End - Create security groups

  # Start - Create bastion host IAM instance profile
  BastionHostInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      InstanceProfileName: BastionHostIamInstanceProfile
      Roles:
        - !Ref BastionHostIamRole

  BastionHostIamRole:
    Type: AWS::IAM::Role
    Properties:
      Tags:
        - Key: iam
          Value: restricted
      RoleName: BastionHostIamRole
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Action:
              - sts:AssumeRole
            Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/ReadOnlyAccess
        - arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore
      Policies:
        - PolicyName: resumeSession
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Resource: "*"
                Effect: Allow
                Action:
                  - ssm:ResumeSession

  BastionHostBuildPolicy: #Permissions to build lab env. This policy is removed from the role at end of build process
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: BastionHostBuildPolicy
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          # Allow bastion host to assume BastionHostIamRole role
          - Effect: Allow
            Action:
              - sts:AssumeRole
            Resource:
              - !GetAtt BastionHostIamRole.Arn
          - Effect: Allow
            Action:
              - ssm:GetParameter
              - eks:CreateCluster
              - eks:CreateNodegroup
              - eks:TagResource
              - eks:UpdateClusterConfig
              - eks:UpdateNodegroupConfig
              - ec2:AllocateAddress
              - ec2:AuthorizeSecurityGroupEgress
              - ec2:AuthorizeSecurityGroupIngress
              - ec2:CreateLaunchTemplate
              - ec2:CreateSecurityGroup
              - ec2:CreateTags
              - ec2:ModifySubnetAttribute
              - ec2:ModifyVpcAttribute
              - ec2:RunInstances
              - cloudformation:CreateStack
              - cloudformation:DeleteStack
              - iam:CreateOpenIDConnectProvider
              - iam:TagOpenIDConnectProvider
              - iam:CreateRole
              - iam:CreateServiceLinkedRole
              - iam:AttachRolePolicy
              - iam:DeleteRolePolicy
              - iam:PutRolePolicy
              - iam:PassRole
              - iam:CreateInstanceProfile
              - iam:AddRoleToInstanceProfile
              - iam:CreateOpenIDConnectProvider
              - iam:CreateServiceLinkedRole
              - iam:DeleteRolePolicy
              - autoscaling:AttachInstances
              - autoscaling:AttachLoadBalancerTargetGroups
              - autoscaling:AttachLoadBalancers
              - autoscaling:CreateAutoScalingGroup
              - autoscaling:CreateLaunchConfiguration
              - autoscaling:CreateOrUpdateTags
              - autoscaling:SetDesiredCapacity
              - autoscaling:UpdateAutoScalingGroup
            Resource: "*"
          - Effect: Allow
            Action:
              - iam:CreateRole
            Resource: !Sub arn:aws:iam::${AWS::AccountId}:role/eksctl-dev-cluster*
          - Effect: Allow
            Action:
              - ssm:UpdateDocument*
              - ssm:CreateDocument*
              - ssm:DeleteDocument*
            Resource: !Sub arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:document/SSM-SessionManagerRunShell
          - Effect: Allow
            Action:
              - ecr:InitiateLayerUpload
              - ecr:UploadLayerPart
              - ecr:CompleteLayerUpload
              - ecr:PutImage
            Resource:
              - !GetAtt ImageRepoHelloWorld.Arn
              - !GetAtt ImageRepoDjApp.Arn

      Roles:
        - !Ref BastionHostIamRole

  BastionHostRunPolicy: # Permissions required to complete the lab objectives only
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: BastionHostRunPolicy
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          # Allow bastion host to assume BastionHostIamRole role
          - Effect: Allow
            Action: s3:ListBucket
            Resource:
              - !Sub arn:aws:s3:::${AWS::Region}-tcprod
          - Effect: Allow
            Action:
              - s3:List*
              - s3:GetObject
            Resource:
              - !Sub arn:aws:s3:::${AWS::Region}-tcprod/*
          - Effect: Allow
            Action:
              - iam:AttachRolePolicy
            Resource:
              - !Sub arn:aws:iam::${AWS::AccountId}:role/eksctl-dev-cluster-cluster-ServiceRole*
              - !Sub arn:aws:iam::${AWS::AccountId}:role/eksctl-dev-cluster-nodegroup-dev-NodeInstanceRole*
              - !Sub arn:aws:iam::${AWS::AccountId}:role/eksctl-dev-cluster-addon-iamserviceaccount*
            Condition:
              ArnLike:
                iam:PolicyARN:
                  - arn:aws:iam::aws:policy/AmazonEKSClusterPolicy
                  - arn:aws:iam::aws:policy/AmazonEKSVPCResourceController
                  - arn:aws:iam::aws:policy/AmazonEKSWorkerNodePolicy
                  - arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryReadOnly
                  - arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore
                  - arn:aws:iam::aws:policy/AmazonEKS_CNI_Policy
                  - arn:aws:iam::aws:policy/eksctl-dev-cluster-cluster-PolicyCloudWatchMetrics
                  - arn:aws:iam::aws:policy/eksctl-dev-cluster-cluster-PolicyELBPermissions
                  - arn:aws:iam::aws:policy/AWSAppMeshFullAccess
                  - arn:aws:iam::aws:policy/AWSCloudMapFullAccess
          - Effect: Allow
            Action:
              - cloudformation:CreateStack
            Resource:
              - "*"
          - Effect: Allow
            Action:
              - iam:CreateRole
              - iam:DetachRolePolicy
            Resource:
              - !Sub arn:aws:iam::${AWS::AccountId}:role/eksctl-dev-cluster*
          # Add ec2 and iam Tag rules
          - Effect: Allow
            Action:
              - iam:UntagRole
              - iam:ListRoleTags
              - iam:TagRole
              - iam:TagOpenIDConnectProvider
              - eks:TagResource
              - iam:CreateOpenIDConnectProvider
            Resource:
              - "*"
          # Permit update appmesh routes and weighting
          - Effect: Allow
            Action:
              - appmesh:UpdateRoute
            Resource:
              - "*"
          - Sid: limitedSize
            Effect: Deny
            Action: ec2:RunInstances
            Resource: arn:aws:ec2:*:*:instance/*
            Condition:
              ForAnyValue:StringNotLike:
                ec2:InstanceType:
                  - 't3.medium'
      Roles:
        - !Ref BastionHostIamRole
  # End - Create bastion host IAM instance profile

  # Start - Create EKS IAM roles
  EksClusterRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: EksClusterRole
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - eks.amazonaws.com
            Action:
              - sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonEKSClusterPolicy

  EksNodeInstanceRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: EksNodeRole
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonEKSWorkerNodePolicy
        - arn:aws:iam::aws:policy/AmazonEKS_CNI_Policy
        - arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryReadOnly
      Policies:
        - PolicyName: AppMeshStream
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Action:
                  - appmesh:StreamAggregatedResources
                Resource: "*"
                Effect: Allow

  # End - Create EKS IAM roles

  # Create Kubernetes admin IAM user
  k8sAdmin:
    Type: AWS::IAM::User
    Properties:
      UserName: k8s-admin

  # Create IAM access key and secret access key for k8s-admin user
  k8sAdminKey:
    Type: AWS::IAM::AccessKey
    Properties:
      Status: Active
      UserName: !Ref k8sAdmin

  # Create ECR repo for hello-world app
  ImageRepoHelloWorld:
    Type: AWS::ECR::Repository
    Properties:
      RepositoryName: hello-world

  # Create ECR repo for hello-world app
  ImageRepoDjApp:
    Type: AWS::ECR::Repository
    Properties:
      RepositoryName: dj-app

  # Start - Create a read-only group and add the lab user to it
  BastionHost:
    Type: AWS::EC2::Instance
    DependsOn:
      - ImageRepoHelloWorld
      - ImageRepoDjApp
      - BastionHostSubnetRouteTableAssociation
      # NOTE - Additional RouteTableAssociation are included because the eksctl create-cluster command launches nodes in these subnets
      - EksPublicSubnet1RouteTableAssociation
      - EksPublicSubnet2RouteTableAssociation
      - EksPublicSubnet3RouteTableAssociation
    Metadata:
      AWS::CloudFormation::Init:
        configSets:
          InstallTools:
            - "update-yum"
            - "install-python3"
            - "create-kube-directory"
            - "install-aws-cli-v2"
            - "install-kubectl"
            - "install-eksctl"
            - "install-other-tools"
            - "install-helm"
            - "install-docker"
          IncreaseSessionMgrTimeout:
            - "inc-session-timeout"
          EksctlCreateCluster:
            - "create-cluster-config"
            - "create-eks-cluster"
          AddIamUserToRbac:
            - "add-iam-user-to-rbac"
          CreateSSMuser:
            - "create-ssm-user"
          ChangeKubeOwner:
            - "change-ssm-user-directory-owner"
            - "change-kube-directory-owner"
            - "change-ssm-user-permissions"
          InstallDJapp:
            - "djappmanifests"
            - "djappnamespace"
            - "djappsourcecode"
            - "download-image-file"
            - "docker-load-image"
            - "push-to-ecr"
          ModifyInstancePermissions:
            - "remove-lab-build-policy"
        # Start - InstallTools config set commands
        update-yum:
          commands:
            update-yum:
              command: yum update -y
              ignoreErrors: false
        install-python3:
          commands:
            install-python3:
              command: yum install -y python3
              ignoreErrors: false
        create-kube-directory:
          commands:
            a-create-kube-directory:
              command: mkdir -p /home/ssm-user/.kube
              ignoreErrors: false
        install-aws-cli-v2:
          commands:
            a-remove-aws-cli-v1:
              command: rm -rf /usr/bin/aws
              ignoreErrors: false
            b-download-aws-cli-v2:
              command: curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
              ignoreErrors: false
            c-unzip-package:
              command: unzip awscliv2.zip
              ignoreErrors: false
            d-install-aws-cli-v2:
              command: sudo ./aws/install -b
              ignoreErrors: false
        install-kubectl:
          commands:
            a-download-kubectl:
              command: curl -LO -o kubectl https://s3.us-west-2.amazonaws.com/amazon-eks/1.26.4/2023-05-11/bin/linux/amd64/kubectl
              ignoreErrors: false
            b-make-executable:
              command: chmod +x ./kubectl
              ignoreErrors: false
            c-set-path:
              command: mkdir -p $HOME/bin && cp ./kubectl $HOME/bin/kubectl && export PATH=$PATH:$HOME/bin
              ignoreErrors: false
            d-export-path:
              command: echo 'export PATH=$PATH:$HOME/bin' >> ~/.bashrc
              ignoreErrors: false
        install-eksctl:
          commands:
            a-download-eksctl:
              # version has been hardcoded to v.0.139 -- released April 2023
              command: curl --silent --location "https://github.com/weaveworks/eksctl/releases/download/v0.139.0/eksctl_Linux_amd64.tar.gz" | tar xz -C /tmp
            b-move-to-bin:
              command: mv /tmp/eksctl /usr/local/bin
              ignoreErrors: false
        install-other-tools:
          commands:
            a-install-tools:
              command: yum -y install jq gettext bash-completion git
              ignoreErrors: false
              #NOTE: Helm version was hardcoded. Next EKS version upgrade will need to revisit this as version 1.23.x is the last supported version with helm 3.8.x.
        install-helm:
          commands:
            a-download-helm:
              command: curl -L https://git.io/get_helm.sh | bash -s -- --version v3.8.2
              ignoreErrors: false
            b-make-executable:
              command: chmod +x /usr/local/bin/helm
              ignoreErrors: false
        install-docker:
          commands:
            a-install-docker:
              command: amazon-linux-extras install docker
              ignoreErrors: false
            b-start-docker-service:
              command: service docker start
              ignoreErrors: false
        # Increase the timeout for Session Mgr
        inc-session-timeout:
          files:
            /temp/ssm-settings.yaml:
              content: |
                inputs:
                  s3BucketName: ""
                  s3KeyPrefix: ""
                  s3EncryptionEnabled: true
                  cloudWatchLogGroupName: ""
                  cloudWatchEncryptionEnabled: true
                  idleSessionTimeout: "60"
                  maxSessionDuration: "90"
                  cloudWatchStreamingEnabled: true
                  kmsKeyId: ""
                  runAsEnabled: false
                  runAsDefaultUser: ""
                  shellProfile:
                    linux: cd $HOME; pwd
                schemaVersion: "1.0"
                description: Lab document to modify Session Manager idle timeout and runas user.
                sessionType: Standard_Stream
          commands:
            a-create-ssm-document:
              command: aws ssm create-document --name "SSM-SessionManagerRunShell" --content "file:///temp/ssm-settings.yaml" --document-format YAML --document-type Session
              ignoreErrors: true
            b-configure-ssm:
              command: aws ssm update-document --name "SSM-SessionManagerRunShell" --content "file:///temp/ssm-settings.yaml" --document-format YAML --document-version '$LATEST'
              ignoreErrors: true
        # Start - EksctlCreateCluster config set commands
        create-cluster-config:
          files:
            /home/ssm-user/scripts/cluster.yaml:
              content: !Sub |
                apiVersion: eksctl.io/v1alpha5
                kind: ClusterConfig
                metadata:
                  name: dev-cluster
                  region: ${AWS::Region}
                  version: "${KubernetesVersion}"
                vpc:
                  id: ${LabVpc}
                  securityGroup: "${ControlPlaneSecurityGroup}"
                  subnets:
                    public:
                      ${AWS::Region}a: { id: ${EksPublicSubnet1} }
                      ${AWS::Region}b: { id: ${EksPublicSubnet2} }
                      ${AWS::Region}c: { id: ${EksPublicSubnet3} }
                  clusterEndpoints:
                    publicAccess: true
                    privateAccess: true
                iam:
                  serviceRoleARN: "${EksClusterRole.Arn}"
                managedNodeGroups:
                  - name: dev-nodes
                    minSize: 2
                    maxSize: 4
                    desiredCapacity: 3
                    volumeSize: 20
                    instanceType: t3.medium
                    iam:
                      instanceRoleARN: ${EksNodeInstanceRole.Arn}
        create-eks-cluster:
          commands:
            1-eksctl-create-cluster:
              command: eksctl create cluster -f /home/ssm-user/scripts/cluster.yaml --kubeconfig /home/ssm-user/.kube/config
              ignoreErrors: false
            2-chmod-kubeconfig:
              command: chmod go-r /home/ssm-user/.kube/config
              ignoreErrors: false
        # Start - AddIamUserToRbac config set commands
        add-iam-user-to-rbac:
          commands:
            add-k8sadmin-system-masters:
              command: !Sub eksctl create iamidentitymapping --cluster dev-cluster --arn ${k8sAdmin.Arn} --region ${AWS::Region} --username k8s-admin --group system:masters
              ignoreErrors: false
        # Start - Create ssm-user and assign as sudoer
        create-ssm-user:
          commands:
            a-create-ssm-user:
              command: if id -u "ssm-user" >/dev/null 2>&1; then echo 'ssm-user already exists'; else useradd ssm-user -m -U; fi
              ignoreErrors: false
            b-make-ssm-user-sudoer:
              command: echo "ssm-user  ALL=(ALL) NOPASSWD:ALL" | sudo tee /etc/sudoers.d/ssm-user
        # Start - ChangeKubeOwner -Change owner of pre-created directories to ssm-user
        change-ssm-user-directory-owner:
          commands:
            set-owner-ssm-user:
              command: chown -R ssm-user /home/ssm-user
              ignoreErrors: false
        change-kube-directory-owner:
          commands:
            set-owner-ssm-user:
              command: chmod -R ugo+rwx /home/ssm-user/.kube
              ignoreErrors: false
        change-ssm-user-permissions:
          commands:
            set-ssmuser-directory:
              command: chmod -R ugo+rwx /home/ssm-user

        # Start - Download DJ App Source Code and Build Docker Image
        djappsourcecode:
          commands:
            a-download-source-code-to-EC2:
              command: wget https://aws-tc-largeobjects.s3.us-west-2.amazonaws.com/ILT-TF-200-CODEKS-10/dj-app-source-code.zip -P /tmp/sourcecode
              ignoreErrors: false
            b-unzip-file:
              command: unzip /tmp/sourcecode/dj-app-source-code.zip -d /tmp/sourcecode/
              ignoreErrors: false
            c-chmod:
              command: chmod -R +x /tmp/sourcecode
              ignoreErrors: false
            d-delete-unused-files:
              command: rm -fR /tmp/sourcecode/__MACOSX /tmp/sourcecode/dj-app-source-code.zip
              ignoreErrors: false
            e-ecr-login:
              command: !Sub aws ecr get-login-password --region ${AWS::Region} | docker login --username AWS --password-stdin ${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com
              ignoreErrors: false
            f-docker-build:
              command: cd /tmp/sourcecode && docker build -t dj-app .
              ignoreErrors: false
            g-docker-tag:
              command: !Sub docker tag dj-app:latest ${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/dj-app:latest
              ignoreErrors: false
            h-docker-push:
              command: !Sub docker push ${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/dj-app:latest
              ignoreErrors: false

        # Start - Download DJ App Manifests
        djappmanifests:
          commands:
            a-download-manifests-to-EC2:
              command: !Sub wget https://${AWS::Region}-tcprod.s3.amazonaws.com/courses/ILT-TF-200-COREKS/v1.4.13.prod-054b44d7/lab-4/scripts/djapp.zip -P /tmp/djapp
              ignoreErrors: false
            b-unzip-file:
              command: unzip /tmp/djapp/djapp.zip -d /home/ssm-user/djapp
            c-replace-base-app-varilables:
              command: export IMAGE_URL=$(aws ecr describe-repositories --repository-name dj-app | jq '.repositories[0].repositoryUri' -r) && tempmanifest=$(mktemp) && envsubst < /home/ssm-user/djapp/1_base_application/base_app-ks.yaml > $tempmanifest && mv $tempmanifest /home/ssm-user/djapp/1_base_application/base_app-ks.yaml
            d-replace-mesh-app-varilables:
              command: export IMAGE_URL=$(aws ecr describe-repositories --repository-name dj-app | jq '.repositories[0].repositoryUri' -r) && tempmanifest=$(mktemp) && envsubst < /home/ssm-user/djapp/2_app_mesh/base_app-ks-meshed.yaml > $tempmanifest && mv $tempmanifest /home/ssm-user/djapp/2_app_mesh/base_app-ks-meshed.yaml
            e-chmod:
              command: chmod -R ugo+rwx /home/ssm-user/djapp
        djappnamespace:
          commands:
            architecture deploy:
              command: kubectl --kubeconfig /home/ssm-user/.kube/config apply -n no-mesh -f /home/ssm-user/djapp/1_base_application/base_app-ks.yaml
              ignoreErrors: false

        # Start - Save Hello-World Docker image to ECR. This image will be used in the final task of the lab.
        download-image-file:
          commands:
            a-make-lab-dir:
              command: mkdir -p /lab
              ignoreErrors: false
            b-download-image-file:
              command: aws s3 cp s3://aws-tc-largeobjects/ILT-TF-200-CODEKS-10/hello-world.tar /lab/
              ignoreErrors: false
        docker-load-image:
          commands:
            docker-load-image:
              command: docker load -i /lab/hello-world.tar
        push-to-ecr:
          commands:
            a-authenticate-to-ecr:
              command: !Sub aws ecr get-login-password --region ${AWS::Region} | docker login --username AWS --password-stdin ${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com
              ignoreErrors: false
            b-tag-image:
              command: !Sub IMAGEID=$(docker image ls | awk '{ print $3 }' | sed -n '$p') && docker tag $IMAGEID ${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/hello-world:v1
              ignoreErrors: false
            c-push-image:
              command: !Sub docker push ${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/hello-world:v1
              ignoreErrors: false
            d-chmod-kubeconfig:
              command: chmod go-r /home/ssm-user/.kube/config
              ignoreErrors: false

        # Start - Modify instance permissions
        remove-lab-build-policy:
          commands:
            remove-lab-build-policy:
              command: !Sub /usr/local/bin/aws iam delete-role-policy --role-name ${BastionHostIamRole} --policy-name BastionHostBuildPolicy


    # Start - Instance properties
    Properties:
      ImageId: !Ref LatestAL2AmiId
      InstanceType: t3.medium
      IamInstanceProfile: !Ref BastionHostInstanceProfile
      Tags:
        - Key: Name
          Value: Bastion Host
      InstanceInitiatedShutdownBehavior: terminate
      BlockDeviceMappings:
        - DeviceName: /dev/xvda
          Ebs:
            VolumeSize: 8
            DeleteOnTermination: true
            VolumeType: gp2
      NetworkInterfaces:
        - AssociatePublicIpAddress: true
          DeviceIndex: "0"
          GroupSet:
            - !Ref BastionHostSecurityGroup
          SubnetId: !Ref BastionHostSubnet
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          yum update -y aws-cfn-bootstrap
          /opt/aws/bin/cfn-init -v --stack ${AWS::StackName} --resource BastionHost --configsets=InstallTools,IncreaseSessionMgrTimeout,EksctlCreateCluster,AddIamUserToRbac,CreateSSMuser,ChangeKubeOwner,InstallDJapp,ModifyInstancePermissions --region ${AWS::Region}
          /opt/aws/bin/cfn-signal -e $? --stack ${AWS::StackName} --resource BastionHost --region ${AWS::Region}
    CreationPolicy:
      ResourceSignal:
        Count: '1'
        Timeout: PT45M
  # End - Create bastion host

Outputs:
  AwsRegion:
    Description: The AWS Region that the lab is running in
    Value: !Ref AWS::Region
  AccountID:
    Description: The AWS account that the lab is running in
    Value: !Ref AWS::AccountId

