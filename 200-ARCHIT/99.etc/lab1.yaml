AWSTemplateFormatVersion: 2010-09-09

Description: Lab1 template which builds a VPC with 1 public subnet and 1 SG

Parameters:
  LatestAL2AmiId: # Locate latest Amazon Linux 2 AMI from public parameter store
    Type: "AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>"
    Default: "/aws/service/ami-amazon-linux-latest/amzn2-ami-hvm-x86_64-gp2"

  VPCCIDR:
    Description: CIDR Block for VPC
    Type: String
    Default: 10.1.0.0/16
    AllowedValues:
      - 10.1.0.0/16

  PublicSubnet1Param:
    Description: Public Subnet 1
    Type: String
    Default: 10.1.11.0/24
    AllowedValues:
      - 10.1.11.0/24

  S3PathPrefix:
    Type: String
    Description: The path prefix where the lab resources are stored.
    Default: courses/ILT-TF-200-ARCHIT/v7.1.1/lab-1-EC2

  S3ResourceBucket:
    Type: String
    Description: The S3 Bucket of where to pull lab resources from.
    Default: -tcprod

Resources:

###########
# Lab VPC and Networking structure
###########
  VPC:
    Type: 'AWS::EC2::VPC'
    Properties:
      CidrBlock: !Ref VPCCIDR
      EnableDnsSupport: True
      EnableDnsHostnames: True
      InstanceTenancy: 'default'
      Tags:
        - Key: Name
          Value: LabVPC

  InternetGateway:
    Type: 'AWS::EC2::InternetGateway'

  AttachGateway:
    Type: 'AWS::EC2::VPCGatewayAttachment'
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway

  PublicSubnet1:
    Type: 'AWS::EC2::Subnet'
    DependsOn: AttachGateway
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Ref PublicSubnet1Param
      MapPublicIpOnLaunch: True
      AvailabilityZone: !Select
        - '0'
        - !GetAZs ''
      Tags:
        - Key: Name
          Value: LabPublicSubnet

  PublicRouteTable:
    Type: 'AWS::EC2::RouteTable'
    DependsOn: PublicSubnet1
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: PublicRouteTable

  PublicRoute:
    Type: 'AWS::EC2::Route'
    DependsOn : AttachGateway
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  PublicSubnet1RouteTableAssociation:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    DependsOn: PublicRoute
    Properties:
      SubnetId: !Ref PublicSubnet1
      RouteTableId: !Ref PublicRouteTable

  LabInstanceSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: Security Group allowing HTTP traffic for lab instances
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: LabInstanceSecurityGroup
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0

###########
# IAM ReadOnly Group for QL
###########
  ReadOnlyGroup:
    Type: AWS::IAM::Group
    Properties:
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/ReadOnlyAccess

  GroupAssignment:
    Type: AWS::IAM::UserToGroupAddition
    Properties:
      GroupName: !Ref ReadOnlyGroup
      Users:
        - awsstudent

###########
# IAM role for EC2 SSM instance profile
###########
  SSMInstanceRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
              - ec2.amazonaws.com
              - ssm.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Description: "A SSM role for use by EC2 Instances to be managed."
      ManagedPolicyArns: [
        "arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore",
        "arn:aws:iam::aws:policy/AmazonEC2ReadOnlyAccess"
      ]
      Policies:
        - PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - "ec2:RunInstances"
                  - "ec2:DescribeInstances"
                  - "ec2:DescribeKeyPairs"
                  - "ec2:DescribeImages"
                  - "ec2:CreateTags"
                  - "ec2:DescribeTags"
                Resource: '*'
          PolicyName: 'awsstudentEC2RunInstances'
      RoleName: SSMInstanceRole

  SSMInstanceProfile:
      Type: "AWS::IAM::InstanceProfile"
      Properties:
        InstanceProfileName: "LabSSMRole"
        Roles:
          - !Ref SSMInstanceRole

###########
# EC2 Enforcer Roles and Components
###########
  LambdaIamRole:
      Type: "AWS::IAM::Role"
      Properties:
        RoleName: LabInstanceCount
        AssumeRolePolicyDocument:
            Version: "2012-10-17"
            Statement:
                  -
                    Effect: "Allow"
                    Principal:
                        Service:
                          - lambda.amazonaws.com
                    Action:
                        - "sts:AssumeRole"
        Policies:
            -
                  PolicyName: "LambdaPolicy"
                  PolicyDocument:
                    Version: "2012-10-17"
                    Statement:
                        -
                          Effect: "Allow"
                          Action:
                              - ec2:*
                          Resource: "*"
                        -
                          Effect: "Allow"
                          Action:
                              - "logs:CreateLogGroup"
                              - "logs:CreateLogStream"
                              - "logs:PutLogEvents"
                          Resource: "*"

  RulesPermission:
    Type: AWS::Lambda::Permission
    Properties:
        FunctionName: !Ref Ec2NumInstancesEnforcer
        Action: "lambda:InvokeFunction"
        Principal: "events.amazonaws.com"
        SourceArn: !GetAtt EventRule.Arn

  EventRule:
    Type: AWS::Events::Rule
    Properties:
        Description: "EventRule"
        EventPattern:
          source:
              -  "aws.ec2"
          detail-type:
              - "EC2 Instance State-change Notification"
          detail:
              state: ["running"]
        State: "ENABLED"
        Targets:
          -
              Arn: !GetAtt Ec2NumInstancesEnforcer.Arn
              Id: Lambda1

  Ec2NumInstancesEnforcer:
    Type: "AWS::Lambda::Function"
    Properties:
        FunctionName: Ec2NumInstancesEnforcer
        Handler: index.handler
        Role: !GetAtt LambdaIamRole.Arn
        Runtime: python3.7
        Environment:
          Variables:
              ALLOWED_REGIONS: !Ref AWS::Region
              MAX_INSTANCES: '5'
        Code:
          ZipFile: |
              import boto3
              import json
              import os
              allowed_regions=os.getenv('ALLOWED_REGIONS')
              max_instances=int(os.getenv('MAX_INSTANCES'))
              print('allowed regions', allowed_regions, 'max instances',max_instances)
              clients={}
              for region in allowed_regions.split(','):
                clients[region] = boto3.client('ec2',region_name=region)

              def numNonTerminatedInstances(client):
                useful_states=['pending','running','shutting-down','stopping','stopped']
                max_results=100
                ans=client.describe_instances(
                    Filters=[
                      {'Name': 'instance-state-name', 'Values':useful_states}
                    ],
                    MaxResults=max_results
                )
                return sum(map(lambda r: len(r['Instances']), ans['Reservations']))

              def numAllNonTerminatedInstances(clients):
                return sum(map(lambda client: numNonTerminatedInstances(client), clients.values()))

              def enforceInstance(instanceId, region):
                num_instances=numAllNonTerminatedInstances(clients)
                print('checking instance', instanceId, region, region in allowed_regions, num_instances)
                client_for_deleting=None
                if region not in allowed_regions:
                    client_for_deleting=boto3.client('ec2',region_name=region)
                elif num_instances > max_instances:
                    client_for_deleting=clients[region]
                if client_for_deleting:
                    try:
                      print( client_for_deleting.terminate_instances(InstanceIds= [instanceId]) )
                    except Exception as e:
                      print('problem deleting instance', instanceId, e)
                else:
                      print('Allowing instance', instanceId, region)

              def handler(event, context):
                print('event ...', event)
                region=event['region']
                instance_id=event['detail']['instance-id']
                enforceInstance(instance_id,region)
###########
# Command Host used for tasks requiring aws cli
###########
  CommandHost:
    Type: AWS::EC2::Instance
    DependsOn: PublicSubnet1RouteTableAssociation
    Properties:
      ImageId: !Ref LatestAL2AmiId
      InstanceType: t3.micro
      IamInstanceProfile: !Ref SSMInstanceProfile
      Tags:
        - Key: Name
          Value: Command Host
      InstanceInitiatedShutdownBehavior: terminate
      NetworkInterfaces:
        - AssociatePublicIpAddress: true
          DeviceIndex: "0"
          GroupSet:
            - !Ref LabInstanceSecurityGroup
          SubnetId: !Ref PublicSubnet1
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          yum update -y aws-cfn-bootstrap
          /opt/aws/bin/cfn-init -v --stack ${AWS::StackName} --resource CommandHost --configsets InstallTools,IncreaseSessionMgrTimeout --region ${AWS::Region}
          /opt/aws/bin/cfn-signal -e $? --stack ${AWS::StackName} --resource CommandHost --region ${AWS::Region}
    CreationPolicy:
      ResourceSignal:
        Timeout: PT45M
    Metadata:
      AWS::CloudFormation::Init:
        configSets:
          InstallTools:
            - "update-yum"
            - "install-aws-cli-v2"
          IncreaseSessionMgrTimeout:
          - "inc-session-timeout"
    # Start - InstallTools config set commands
        update-yum:
          commands:
            update-yum:
              command: yum update -y
              ignoreErrors: false
        install-aws-cli-v2:
          commands:
            a-remove-aws-cli-v1:
              command: rm -rf /usr/bin/aws
              ignoreErrors: false
            b-download-aws-cli-v2:
              command: curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
              ignoreErrors: false
            c-unzip-package:
              command: unzip awscliv2.zip
              ignoreErrors: false
            d-install-aws-cli-v2:
              command: sudo ./aws/install -b
              ignoreErrors: false
      # Start - IncreaseSessionMgrTimeout config set commands
        inc-session-timeout:
          files:
            /temp/ssm-settings.yaml:
              content: |
                inputs:
                  s3BucketName: ""
                  s3KeyPrefix: ""
                  s3EncryptionEnabled: true
                  cloudWatchLogGroupName: ""
                  cloudWatchEncryptionEnabled: true
                  idleSessionTimeout: "60"
                  cloudWatchStreamingEnabled: true
                  kmsKeyId: ""
                  runAsEnabled: false
                  runAsDefaultUser: ""
                  shellProfile:
                    linux: cd $HOME; pwd
                schemaVersion: "1.0"
                description: Lab document to modify Session Manager idle timeout and runas user.
                sessionType: Standard_Stream
          commands:
            a-create-ssm-document:
              command: aws ssm create-document --name "SSM-SessionManagerRunShell" --content "file:///temp/ssm-settings.yaml" --document-format YAML --document-type Session
              ignoreErrors: true
            b-configure-ssm:
              command: aws ssm update-document --name "SSM-SessionManagerRunShell" --content "file:///temp/ssm-settings.yaml" --document-format YAML --document-version '$LATEST'
              ignoreErrors: true

Outputs:
  LabRegion:
    Description: "The AWS Region this Lab was created in"
    Value: !Ref AWS::Region
    Export:
      Name: "LabRegion"

  LabInstanceSecurityGroupID:
    Description: "The Security Group ID for the Lab Instance Security Group"
    Value: !Ref LabInstanceSecurityGroup
    Export:
      Name: "LabInstanceSecurityGroupID"

  LabPublicSubnetID:
    Description: "The Public Subnet ID for use with Lab Instances"
    Value: !Ref PublicSubnet1
    Export:
      Name: "LabPublicSubnetID"

  TaskTemplateUrl:
    Description: The URL to the Session Management Console for CommandHost
    Value: !Sub https://${AWS::Region}${S3ResourceBucket}.s3.amazonaws.com/${S3PathPrefix}/scripts/Task3.yaml

  OptionalTemplateUrl:
    Description: The URL to the Session Management Console for CommandHost
    Value: !Sub https://${AWS::Region}${S3ResourceBucket}.s3.amazonaws.com/${S3PathPrefix}/scripts/optional.yaml


 

