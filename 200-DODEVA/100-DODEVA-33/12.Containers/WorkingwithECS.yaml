AWSTemplateFormatVersion: '2010-09-09'
Description: AWS CloudFormation template to create a new VPC or use an existing VPC
  for ECS deployment

Parameters:
  VPCCIDR:
    Description: CIDR Block for VPC
    Type: String
    Default: 10.1.0.0/16
    AllowedValues:
      - 10.1.0.0/16
  PublicSubnet1Param:
    Description: Public Subnet 1
    Type: String
    Default: 10.1.11.0/24
    AllowedValues:
      - 10.1.11.0/24
  PublicSubnet2Param:
    Description: Public Subnet 2
    Type: String
    Default: 10.1.12.0/24
    AllowedValues:
      - 10.1.12.0/24

  ECSAMI:
    Description: AMI ID
    Type: AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>
    Default: /aws/service/ecs/optimized-ami/amazon-linux-2/recommended/image_id


Resources:

  ECSCluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: ECSCluster

  MyPrivateDnsNamespace:
    Type: "AWS::ServiceDiscovery::PrivateDnsNamespace"
    Properties:
      Vpc: !Ref VPC
      Name: MyPrivateDnsNamespace

  VPC:
    Type: 'AWS::EC2::VPC'
    Properties:
      CidrBlock: !Ref VPCCIDR
      EnableDnsSupport: 'true'
      EnableDnsHostnames: 'true'
      Tags:
        - Key: Name
          Value: Lab VPC

  InternetGateway:
    Type: 'AWS::EC2::InternetGateway'
    DependsOn: VPC
  AttachGateway:
    Type: 'AWS::EC2::VPCGatewayAttachment'
    DependsOn:
      - VPC
      - InternetGateway
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway

  PublicSubnet1:
    Type: 'AWS::EC2::Subnet'
    DependsOn: AttachGateway
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Ref PublicSubnet1Param
      AvailabilityZone: !Select
        - '0'
        - !GetAZs ''
      Tags:
        - Key: Name
          Value: Public Subnet 1

  PublicSubnet2:
    Type: 'AWS::EC2::Subnet'
    DependsOn: AttachGateway
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Ref PublicSubnet2Param
      AvailabilityZone: !Select
        - '1'
        - !GetAZs ''
      Tags:
        - Key: Name
          Value: Public Subnet 2

  PublicRouteTable:
    Type: 'AWS::EC2::RouteTable'
    DependsOn:
      - VPC
      - AttachGateway
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: Public



  PublicRoute:
    Type: 'AWS::EC2::Route'
    DependsOn:
      - PublicRouteTable
      - AttachGateway
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  PublicSubnet1RouteTableAssociation:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    DependsOn:
      - PublicRouteTable
      - PublicSubnet1
      - AttachGateway
    Properties:
      SubnetId: !Ref PublicSubnet1
      RouteTableId: !Ref PublicRouteTable

  PublicSubnet2RouteTableAssociation:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    DependsOn:
      - PublicRouteTable
      - PublicSubnet2
    Properties:
      SubnetId: !Ref PublicSubnet2
      RouteTableId: !Ref PublicRouteTable

  MySecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    DependsOn: AttachGateway
    Properties:
      GroupDescription: MySecurityGroup
      GroupName: MySecurityGroup
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: MySecurityGroup

      SecurityGroupEgress:
        - IpProtocol: tcp
          FromPort: '0'
          ToPort: '65535'
          CidrIp: 0.0.0.0/0
        - IpProtocol: udp
          FromPort: '0'
          ToPort: '65535'
          CidrIp: 0.0.0.0/0
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '80'
          ToPort: '80'
          CidrIp: 0.0.0.0/0

  MyAutoScallingGroup:
    DependsOn: EcsInstanceLC
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      AutoScalingGroupName: MyAutoScallingGroup
      AvailabilityZones:
      - Fn::Select:
        - '0'
        - Fn::GetAZs:
            Ref: AWS::Region
      - Fn::Select:
        - '1'
        - Fn::GetAZs:
            Ref: AWS::Region
      LaunchConfigurationName:
        Ref: "EcsInstanceLC"
      MinSize: '1'
      MaxSize: 2
      DesiredCapacity: 2
      VPCZoneIdentifier:
        - !Ref PublicSubnet1
        - !Ref PublicSubnet2

  myLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    DependsOn:
      - FirstEIP
      - SecondEIP
    Properties:
      Type: network
      Name: MyLoadBalancer
      SubnetMappings:
        - AllocationId: !GetAtt
            - FirstEIP
            - AllocationId
          SubnetId: !Ref PublicSubnet1
        - AllocationId: !GetAtt
            - SecondEIP
            - AllocationId
          SubnetId: !Ref PublicSubnet2

  FirstEIP:
    Type: AWS::EC2::EIP
    Properties:
      Domain: VPC

  SecondEIP:
    Type: AWS::EC2::EIP
    Properties:
      Domain: VPC

  myListener:
    DependsOn:
      - myTargetGroup
      - myLoadBalancer
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
      - Type: forward
        TargetGroupArn:
          Ref: myTargetGroup
      LoadBalancerArn:
        Ref: myLoadBalancer
      Port: '80'
      Protocol: TCP

  myTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: myTargetGroup
      Port: 80
      Protocol: TCP
      TargetType: instance
      VpcId: !Ref VPC


  ECSEC2RoleInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: "/"
      Roles:
      - !Ref ECSEC2Role

  ECSEC2Role:
    Type: AWS::IAM::Role
    Properties:
      RoleName: ECSEC2Role
      AssumeRolePolicyDocument:
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - ec2.amazonaws.com
          Action:
          - sts:AssumeRole
      Path: "/"
      Policies:
      - PolicyName: ecs-service
        PolicyDocument:
          Statement:
          - Effect: Allow
            Action:
            - ecs:*
            Resource: "*"

  ecsServiceRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: ecsServiceRole
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ecs.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: /
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonEC2ContainerServiceRole

  EcsInstanceLC:
    Type: AWS::AutoScaling::LaunchConfiguration
    Metadata:
      AWS::CloudFormation::Init:
        configSets:
          ConfigCluster:
            - Install
        Install:
          files:
            /home/ec2-user/.aws/config:
              mode: '000755'
              owner: ec2-user
              group: root
              content: !Sub |
                [default]
                region = ${AWS::Region}
            /etc/ecs/ecs.config:
              content: !Sub 'ECS_CLUSTER=${ECSCluster}'
              mode: '000755'
              owner: root
              group: root
    Properties:
      ImageId: !Ref ECSAMI
      LaunchConfigurationName: 'EcsInstanceLC'
      InstanceType: t2.medium
      AssociatePublicIpAddress: true
      IamInstanceProfile: !Ref 'ECSEC2RoleInstanceProfile'
      SecurityGroups:
        - !Ref 'MySecurityGroup'
      UserData:
        Fn::Base64:
          !Sub |
            #!/bin/bash -xe
            yum update -y
            yum install -y aws-cfn-bootstrap git aws-cli
            # Install the files and packages from the metadata
            /opt/aws/bin/cfn-init -v --stack ${AWS::StackName} --resource EcsInstanceLC --configsets ConfigCluster --region ${AWS::Region}
            # Signal the status from cfn-init
            /opt/aws/bin/cfn-signal -e $? --stack ${AWS::StackName} --resource MyAutoScallingGroup --region ${AWS::Region}

  ReadOnlyGroup:
    Type: AWS::IAM::Group
    Properties:
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/ReadOnlyAccess

  GroupAssignment:
    Type: AWS::IAM::UserToGroupAddition
    Properties:
      GroupName: !Ref ReadOnlyGroup
      Users:
        - awsstudent
