AWSTemplateFormatVersion: 2010-09-09
Description: Developing on AWS - Lab 4 - Developing Event-Driven Solutions with AWS Lambda.

Parameters:
  AdministratorPassword:
    Type: String

  KeyName:
    Type: AWS::EC2::KeyPair::KeyName

  LinuxAmiId:
    Type: AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>
    Default: /aws/service/ami-amazon-linux-latest/amzn2-ami-hvm-x86_64-gp2

  WindowsAmiId:
    Type: AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>
    Default: /aws/service/ami-windows-latest/Windows_Server-2019-English-Full-Base

Resources:
  LabVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsHostnames: true
      EnableDnsSupport: true
      Tags:
        - Key: Name
          Value: Lab VPC

  InternetGateway:
    Type: AWS::EC2::InternetGateway

  AttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref LabVPC
      InternetGatewayId: !Ref InternetGateway

  PublicSubnet:
    Type: AWS::EC2::Subnet
    DependsOn: AttachGateway
    Properties:
      VpcId: !Ref LabVPC
      CidrBlock: 10.0.1.0/24
      MapPublicIpOnLaunch: true
      AvailabilityZone: !Select
        - 0
        - !GetAZs
      Tags:
        - Key: Name
          Value: Public Subnet

  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    DependsOn: PublicSubnet
    Properties:
      VpcId: !Ref LabVPC
      Tags:
        - Key: Name
          Value: Public Route Table

  PublicRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  PublicSubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet
      RouteTableId: !Ref PublicRouteTable

  InstanceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Action:
              - sts:AssumeRole
            Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/ReadOnlyAccess
        - arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore

  InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Roles:
        - !Ref InstanceRole

  WindowsSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security Group for the Windows Instance
      SecurityGroupEgress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 3389
          ToPort: 3389
          CidrIp: 0.0.0.0/0
      VpcId: !Ref LabVPC

  WindowsInstance:
    Type: AWS::EC2::Instance
    CreationPolicy:
      ResourceSignal:
        Count: 1
        Timeout: PT30M
    DependsOn:
      - PublicSubnetRouteTableAssociation
    Metadata:
      AWS::CloudFormation::Init:
        configSets:
          default:
            - 01-ShowFileExtensions
            - 02-Windows
            - 03-Environment
            - 04-AWS
            - 05-Ant
            - 06-Chrome
            - 07-Eclipse
            - 08-FireFox
            - 09-Java
            - 10-Chocolatey-Install
            - 11-NET-Core
            - 12-SAM-CLI
            - 13-Shortcuts
            - 14-PyCharm
            - 15-Python
            - 16-Workspace
        01-ShowFileExtensions:
          files:
            C:\cfn\temp\show-file-extensions.ps1:
              content: |
                start explorer.exe
                Push-Location
                Set-Location HKCU:\Software\Microsoft\Windows\CurrentVersion\Explorer\Advanced
                Set-ItemProperty . HideFileExt "0"
                Pop-Location
                Stop-Process -processName: Explorer -force
        02-Windows:
          commands:
            1-Change-Password:
              command: !Sub net user Administrator "${AdministratorPassword}"
              waitAfterCompletion: 0
            2-Disable-IE-ESC:
              command: REG ADD "HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Active Setup\Installed Components\{A509B1A7-37EF-4b3f-8CFC-4F3A74704073}" /v IsInstalled /t REG_DWORD /d 0 /f
              waitAfterCompletion: 0
            3-Disable-IE-First-Run:
              command: REG ADD "HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Internet Explorer\Main" /v DisableFirstRunCustomize /t REG_DWORD /d 1 /f
              waitAfterCompletion: 0
            4-Show-File-Extensions:
              command: reg add HKCU\Software\Microsoft\Windows\CurrentVersion\Explorer\Advanced /v HideFileExt /t REG_DWORD /d 0 /f
              waitAfterCompletion: 0
        04-AWS:
          packages:
            msi:
              aws-cli: https://awscli.amazonaws.com/AWSCLIV2.msi
              aws-sdk: http://sdk-for-net.amazonwebservices.com/latest/AWSToolsAndSDKForNet.msi
          files:
            C:\Users\Administrator\.aws\config:
              content: !Sub |
                [default]
                region = ${AWS::Region}
        05-Ant:
          sources:
            C:\: https://aws-tc-largeobjects.s3.amazonaws.com/AWS-200-DEV/v3.4/binaries/packages/apache-ant-1.10.3-bin.zip
        06-Chrome:
          files:
            C:\cfn\temp\ChromeInstaller_WindowsServer2019.exe:
              source: https://aws-tc-largeobjects.s3.amazonaws.com/AWS-200-DEV/v3.4/binaries/packages/ChromeInstaller_WindowsServer2019.exe
            c:\cfn\temp\chrome-install.ps1:
              content: Start-Process 'C:\cfn\temp\ChromeInstaller_WindowsServer2019.exe' -Args '/silent /install' -wait
          commands:
            1-Install-Chrome:
              command: powershell -file "C:\cfn\temp\chrome-install.ps1"
              waitAfterCompletion: 0
        07-Eclipse:
          files:
            C:\cfn\temp\eclipse-fix.ps1:
              content: |
                <#

                .CREATION
                  9/25/2020

                .DESCRIPTION
                  This script is used to provide the AccessKeyId, SecretAccessKey, and AccessToken required for Eclipse to function.
                  It obtains the credentials from the Student-Role and populates those values into the C:\Users\Administrator\.aws\credentials file.
                  It also generates a file for the language stats for Java.
                  
                .UPDATES

                #>

                stop-process -Name "Eclipse" -ErrorAction SilentlyContinue
                remove-item c:\Users\Administrator\.aws\credentials -ErrorAction SilentlyContinue
                $gRole= curl http://169.254.169.254/latest/meta-data/iam/security-credentials
                $myRoleName= $gRole.Content | Out-String
                $role_name="Student-Role"
                $R= curl http://169.254.169.254/latest/meta-data/iam/security-credentials/$myRoleName -ContentType "application/json"
                $x = $R.Content | Out-String | ConvertFrom-Json
                $file = "C:\Users\Administrator\.aws\prep"
                Write-Output "[default]" >$file
                Write-Output "aws_access_key_id = $($x.AccessKeyId)" >>$file
                Write-Output "aws_secret_access_key = $($x.SecretAccessKey)" >>$file
                Write-Output "aws_session_token = $($x.Token)" >>$file
                Get-Content C:\Users\Administrator\.aws\prep -Encoding UTF8 | Set-Content C:\Users\Administrator\.aws\credentials
                start-process C:\eclipse\eclipse.exe
                $myPath = "C:\temp\language_stats"
                If(!(test-path $myPath))
                {
                      New-Item -ItemType Directory -Force -Path $myPath
                }
                $timeStr = get-date -f 'yyyy-MM-dd-HHmmss'; new-item -Path C:\temp\language_stats\ -Name "Developing_On_AWS-Lab6_$timeStr.csv" -ItemType "file" -Value "$timeStr,Developing on AWS,Lab 6,Java"
          sources:
            C:\: https://aws-tc-largeobjects.s3.amazonaws.com/AWS-200-DEV/v3.4/binaries/packages/eclipse-jee-oxygen-3a-win32-x86_64.zip
        08-FireFox:
          files:
            C:\cfn\temp\FirefoxInstaller_WindowsServer2019.exe:
              source: https://aws-tc-largeobjects.s3.amazonaws.com/AWS-200-DEV/v3.4/binaries/packages/FirefoxInstaller_WindowsServer2019.exe
            c:\cfn\temp\firefox-install.ps1:
              content: Start-Process 'C:\temp\installers\SetuserFTA.exe' -Args '/silent /install' -wait
          commands:
            1-Install-FireFox:
              command: powershell -file "C:\cfn\temp\firefox-install.ps1"
              waitAfterCompletion: 0
        09-Java:
          files:
            C:\temp\installers\jdk-8u171-windows-x64.exe:
              source: https://aws-tc-largeobjects.s3.amazonaws.com/AWS-200-DEV/v3.4/binaries/packages/jdk-8u171-windows-x64.exe
          commands:
            1-Install-Java-SDK:
              command: C:\temp\installers\jdk-8u171-windows-x64.exe /s ADDLOCAL="ToolsFeature,SourceFeature"
              waitAfterCompletion: 0
        10-Chocolatey-Install:
          commands:
            1-Install-Chocolatey:
              command: powershell.exe -Command iex ((New-Object System.Net.WebClient).DownloadString('https://chocolatey.org/install.ps1'))
              waitAfterCompletion: 0
        11-NET-Core:
          files:
            C:\Users\Administrator\AppData\Local\AWSToolkit\MiscSettings.json:
              content: !Sub |
                {
                    "MiscSettings" : {
                        "FirstRunFormShown" : "true"
                    }
                }
            C:\temp\installers\dotnet-sdk-3.1.412-win-x64.exe:
              source: https://aws-tc-largeobjects.s3-us-west-2.amazonaws.com/AWS-200-DEV/v3.4/binaries/packages/dotnet-sdk-3.1.412-win-x64.exe
            C:\temp\installers\AWSToolkitPackage.vsix:
              source: https://aws-tc-largeobjects.s3-us-west-2.amazonaws.com/AWS-200-DEV/v3.4/binaries/packages/AWSToolkitPackage-v1-20-1-0.vsix
            C:\cfn\temp\vs-fix.ps1:
              content: |
                <#                 
                .CREATION
                1/7/2021

                .DESCRIPTION
                This script is used to provide the AccessKeyId, SecretAccessKey, and AccessToken required for AWS Explorer to function inside of Visual Studio.
                It obtains the credentials from the Student-Role and populates those values into the C:\Users\Administrator\.aws\credentials file.

                .UPDATES
                5/12/2021 
                Create the credentials file. Appears to use the default profile.
                #>

                # Stop any running processes of Visual Studio
                stop-process -Name "devenv" -ErrorAction SilentlyContinue
                #Make sure the .aws directory exists. If not, create it.
                $awsPath = "C:\Users\Administrator\.aws"
                If(!(test-path $awsPath))
                {
                  New-Item -ItemType Directory -Force -Path $awsPath
                }
                # Clean up exiting files so they are fresh.
                remove-item c:\Users\Administrator\.aws\credentials -ErrorAction SilentlyContinue
                remove-item c:\Users\Administrator\.aws\config -ErrorAction SilentlyContinue
                # The magic happens here...
                $setRegion = Invoke-RestMethod -uri http://169.254.169.254/latest/meta-data/placement/region
                $gRole= curl http://169.254.169.254/latest/meta-data/iam/security-credentials
                $myRoleName= $gRole.Content | Out-String
                $role_name="Student-Role"
                $R= curl http://169.254.169.254/latest/meta-data/iam/security-credentials/$myRoleName -ContentType "application/json"
                $x = $R.Content | Out-String | ConvertFrom-Json
                $configPrepFile = "C:\Users\Administrator\.aws\configPrepFile"
                $configFile = "C:\Users\Administrator\.aws\config"
                $credentialsPrepFile = "C:\Users\Administrator\.aws\credentialsPrepFile"
                $credentialsFile = "C:\Users\Administrator\.aws\credentials"

                # Create credentialsPrepFile with the default profile.
                Write-Output "[developer]" >$credentialsPrepFile
                #Write-Output "region = $setRegion" >>$credentialsPrepFile
                #Write-Output "output = yaml" >>$credentialsPrepFile
                Write-Output "aws_access_key_id = $($x.AccessKeyId)" >>$credentialsPrepFile
                Write-Output "aws_secret_access_key = $($x.SecretAccessKey)" >>$credentialsPrepFile
                Write-Output "aws_session_token = $($x.Token)" >>$credentialsPrepFile
                Write-Output "" >>$credentialsPrepFile

                # Create credentialsPrepFile with the developer profile.
                Write-Output "[developer-role]" >>$credentialsPrepFile
                #Write-Output "region = $setRegion" >>$credentialsPrepFile
                #Write-Output "output = yaml" >>$credentialsPrepFile
                Write-Output "aws_access_key_id = $($x.AccessKeyId)" >>$credentialsPrepFile
                Write-Output "aws_secret_access_key = $($x.SecretAccessKey)" >>$credentialsPrepFile
                Write-Output "aws_session_token = $($x.Token)" >>$credentialsPrepFile

                # Create configPrepFile with default profile, region, and output format.
                Write-Output "[developer]" >$configPrepFile
                Write-Output "region = $setRegion" >>$configPrepFile
                Write-Output "output = json" >>$configPrepFile
                Write-Output "" >>$configPrepFile

                # Create configPrepFile with developer profile, region, and output format.
                Write-Output "[developer-role]" >>$configPrepFile
                Write-Output "region = $setRegion" >>$configPrepFile
                Write-Output "output = json" >>$configPrepFile
                Write-Output "" >>$configPrepFile

                # Create the credentials file
                Get-Content $credentialsPrepFile -Encoding UTF8 | Set-Content $credentialsFile

                # Create the config file
                Get-Content $configPrepFile -Encoding UTF8 | Set-Content $configFile
                # Start Visual Studio
                start-process "C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\Common7\IDE\devenv.exe"
                # clean up temp files no longer needed.
                Remove-Item $credentialsPrepFile -ErrorAction SilentlyContinue
                Remove-Item $configPrepFile -ErrorAction SilentlyContinue 
          commands:      
            1-Install-DotNetCore3:
              command: C:\temp\installers\dotnet-sdk-3.1.412-win-x64.exe --yes /a /q
              waitAfterCompletion: 0
            2-Install-Visual-Studio-2019:
              command: C:\ProgramData\chocolatey\bin\choco.exe install visualstudio2019community --package-parameters "--add Microsoft.VisualStudio.Workload.ManagedDesktop" --yes --no-progress --ignore-package-exit-codes 
              waitAfterCompletion: 0
            3-Install-AWS-Toolkit-Plugin:
              command: |
                "C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\Common7\IDE\VSIXInstaller.exe" /a /q C:\temp\installers\AWSToolkitPackage.vsix
              waitAfterCompletion: 0
        12-SAM-CLI:
          files:
            c:\temp\installers\AWS_SAM_CLI_64_PY3.msi:
              source: https://aws-tc-largeobjects.s3-us-west-2.amazonaws.com/AWS-200-DEV/v4.0/binaries/packages/AWS_SAM_CLI_64_PY3.msi
          commands:
            1-Install-SAM-CLI:
              command: c:\temp\installers\AWS_SAM_CLI_64_PY3.msi /quiet
              waitAfterCompletion: 0
        13-Shortcuts:
          files:
            C:\cfn\temp\pin-to-taskbar.psm1:
              content: |
                class PinToTaskBar_Verb 
                {
                    [string]$KeyPath1  = "HKCU:\SOFTWARE\Classes"
                    [string]$KeyPath2  = "*"
                    [string]$KeyPath3  = "shell"
                    [string]$KeyPath4  = "{:}"

                    [Microsoft.Win32.RegistryKey]$Key2 
                    [Microsoft.Win32.RegistryKey]$Key3
                    [Microsoft.Win32.RegistryKey]$Key4

                    PinToTaskBar_Verb()
                    {
                        $this.Key2 = (Get-Item $this.KeyPath1).OpenSubKey($this.KeyPath2, $true)
                    }


                    [void] InvokePinVerb([string]$target)
                    {
                        Write-Host "Pinning $target to taskbar"
                        $Shell = New-Object -ComObject "Shell.Application"
                        $Folder = $Shell.Namespace((Get-Item $Target).DirectoryName)
                        $Item = $Folder.ParseName((Get-Item $Target).Name)
                        $Item.InvokeVerb("{:}")
                    }



                    [bool] CreatePinRegistryKeys()
                    {
                        $TASKBARPIN_PATH = "HKLM:\SOFTWARE\Microsoft\Windows\CurrentVersion\Explorer\CommandStore\shell\Windows.taskbarpin";
                        $ValueName = "ExplorerCommandHandler"
                        $ValueData = (Get-ItemProperty $TASKBARPIN_PATH).ExplorerCommandHandler

                        Write-Host "Creating Registry Key: $($this.Key2.Name)\$($this.KeyPath3)"
                        $this.Key3 = $this.Key2.CreateSubKey($this.KeyPath3, $true)

                        Write-Host "Creating Registry Key: $($this.Key3.Name)\$($this.KeyPath4)"
                        $this.Key4 = $this.Key3.CreateSubKey($this.KeyPath4, $true)

                        Write-Host "Creating Registry Key: $($this.Key4.Name)\$($valueName)"
                        $this.Key4.SetValue($ValueName, $ValueData)

                        return $true
                    }

                    [bool] DeletePinRegistryKeys()
                    {
                        Write-Host "Deleting Registry Key: $($this.Key4.Name)"
                        $this.Key3.DeleteSubKey($this.KeyPath4)
                        if ($this.Key3.SubKeyCount -eq 0 -and $this.Key3.ValueCount -eq 0) 
                        {
                            Write-Host "Deleting Registry Key: $($this.Key3.Name)"
                            $this.Key2.DeleteSubKey($this.KeyPath3)
                        }
                        return $true
                    }

                    [bool] Pin([string]$target)
                    {
                        try
                        {
                            $this.CreatePinRegistryKeys()
                            $this.InvokePinVerb($target)
                        }
                        finally
                        {
                            $this.DeletePinRegistryKeys()
                        }
                        return $true
                    }

                } 
            C:\cfn\temp\app-shortcuts.ps1:
              content: |
                using module "C:\cfn\temp\pin-to-taskbar.psm1" 

                $WshShell = New-Object -comObject WScript.Shell
                $Shortcut = $WshShell.CreateShortcut("C:\Users\Administrator\Desktop\My Visual Studio.lnk")
                $Shortcut.TargetPath = "C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe"
                $Shortcut.Arguments = "-ExecutionPolicy bypass C:\cfn\temp\vs-fix.ps1 -WindowStyle Hidden"
                $Shortcut.IconLocation = "C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\Common7\IDE\devenv.exe"
                $Shortcut.Save()

                $WshShell = New-Object -comObject WScript.Shell
                $Shortcut = $WshShell.CreateShortcut("C:\ProgramData\Microsoft\Windows\Start Menu\Programs\My Visual Studio.lnk")
                $Shortcut.TargetPath = "C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe"
                $Shortcut.Arguments = "-ExecutionPolicy bypass C:\cfn\temp\vs-fix.ps1 -WindowStyle Hidden"
                $Shortcut.IconLocation = "C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\Common7\IDE\devenv.exe"
                $Shortcut.Save()

                $WshShell = New-Object -comObject WScript.Shell
                $Shortcut = $WshShell.CreateShortcut("C:\Users\Administrator\Desktop\Eclipse.lnk")
                $Shortcut.TargetPath = "C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe"
                $Shortcut.Arguments = "-ExecutionPolicy bypass C:\cfn\temp\eclipse-fix.ps1 -WindowStyle Hidden"
                $Shortcut.IconLocation = "%SystemDrive%\eclipse\eclipse.exe"
                $Shortcut.Save()

                $WshShell = New-Object -comObject WScript.Shell
                $Shortcut = $WshShell.CreateShortcut("C:\Users\Administrator\Desktop\PyCharm.lnk")
                $Shortcut.TargetPath = "C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe"
                $Shortcut.Arguments = "-ExecutionPolicy bypass C:\cfn\temp\python-fix.ps1 -WindowStyle Hidden"
                $Shortcut.IconLocation = "C:\Program Files (x86)\JetBrains\PyCharm Community Edition 2018.1.4\bin\pycharm64.exe"
                $Shortcut.Save()                

                # Taskbar shortcuts get created next.
                [PinToTaskBar_Verb] $pin = [PinToTaskBar_Verb]::new();
                $pin.Pin("C:\Program Files\Google\Chrome\Application\chrome.exe") 
                $pin.Pin("$env:windir\system32\WindowsPowerShell\v1.0\powershell.exe")
                $pin.Pin("$env:windir\system32\WindowsPowerShell\v1.0\PowerShell_ISE.exe")
          commands:
            1-Create-Shortcuts:
              command: powershell -file "C:\cfn\temp\app-shortcuts.ps1"
              waitAfterCompletion: 0
            2-Delete-Shortcut1:
              command: del "c:\Users\Administrator\Desktop\EC2 Feedback.website"
              waitAfterCompletion: 0
            3-Delete-Shortcut2:
              command: del "c:\Users\Administrator\Desktop\EC2 Microsoft Windows Guide.website"
              waitAfterCompletion: 0
            4-Delete-Shortcut3:
              command: del "c:\Users\Public\Desktop\IntelliJ IDEA Community Edition 2021.1.1 x64.lnk"
              waitAfterCompletion: 0
        14-PyCharm:
          files:
            C:\temp\installers\pycharm-community-2018.1.4.exe:
              source: https://aws-tc-largeobjects.s3.amazonaws.com/AWS-200-DEV/v3.4/binaries/packages/pycharm-community-2018.1.4.exe
            C:\cfn\temp\python-fix.ps1:
              content: |
                <#

                .CREATION
                1/13/2021

                .DESCRIPTION
                Generates a file for the language stats effort for Python.

                .UPDATES

                #>

                stop-process -Name "Pycharm" -ErrorAction SilentlyContinue
                start-process "C:\Program Files (x86)\JetBrains\PyCharm Community Edition 2018.1.4\bin\pycharm64.exe"
                $myPath = "C:\temp\language_stats"
                If(!(test-path $myPath))
                {
                      New-Item -ItemType Directory -Force -Path $myPath
                }
                $timeStr = get-date -f 'yyyy-MM-dd-HHmmss'; new-item -Path C:\temp\language_stats\ -Name "Developing_On_AWS-Lab6_$timeStr.csv" -ItemType "file" -Value "$timeStr,Developing on AWS,Lab 6,Python"
          commands:
            1-Install-PyCharm:
              command: C:\temp\installers\pycharm-community-2018.1.4.exe /S
              waitAfterCompletion: 0
        15-Python:
          files:
            C:\temp\installers\python-3.8.7-amd64.exe:
              source: https://aws-tc-largeobjects.s3.amazonaws.com/AWS-200-DEV/v3.4/binaries/packages/python-3.8.7-amd64.exe
          commands:
            1-Install-Python:
              command: C:\temp\installers\python-3.8.7-amd64.exe /quiet InstallAllUsers=1
              waitAfterCompletion: 0
            2-Install-Pip-Packages:
              command: |
                "C:\Program Files\Python38\Scripts\pip3.8.exe" install boto3
              waitAfterCompletion: 0
        16-Workspace:
          sources:
            C:\temp\workdir: !Sub http://${AWS::Region}-tcprod.s3.${AWS::Region}.amazonaws.com/courses/ILT-TF-200-DODEVA/v3.4.18/lab-4-lambda/scripts/workspace.zip
        03-Environment:
          files:
            C:\cfn\temp\environment-variables.ps1:
              content: |
                $machinePath = [Environment]::GetEnvironmentVariable("path", [EnvironmentVariableTarget]::Machine)
                [Environment]::SetEnvironmentVariable('Path', $machinePath + ';C:\apache-ant-1.10.3\bin;C:\Program Files\Java\jdk1.8.0_171\bin;C:\Program Files\Python38;C:\Program Files\Python38\Scripts', [EnvironmentVariableTarget]::Machine)
                [Environment]::SetEnvironmentVariable('ANT_HOME', 'C:\apache-ant-1.10.3', [EnvironmentVariableTarget]::Machine)
                [Environment]::SetEnvironmentVariable('JAVA_HOME', 'C:\Program Files\Java\jdk1.8.0_171\', [EnvironmentVariableTarget]::Machine)
          commands:
            1-Set-Environment-Variables:
              command: powershell.exe -File "C:\cfn\temp\environment-variables.ps1"
              waitAfterCompletion: 0
    Properties:
      IamInstanceProfile: !Ref InstanceProfile
      ImageId: !Ref WindowsAmiId
      InstanceType: m5.large
      KeyName: !Ref KeyName
      SecurityGroupIds:
        - !Ref WindowsSecurityGroup
      SubnetId: !Ref PublicSubnet
      BlockDeviceMappings:
        - DeviceName: /dev/sda1
          Ebs:
            VolumeSize: 60
            VolumeType: gp2
      Tags:
        - Key: Name
          Value: Windows Dev Instance
        - Key: EC2Connect
          Value: "true"
      UserData:
        Fn::Base64: !Sub |
          <script>
            cfn-init.exe -v --stack ${AWS::StackName} --region ${AWS::Region} --resource WindowsInstance
            cfn-signal.exe --stack ${AWS::StackName} --region ${AWS::Region} --resource WindowsInstance --exit-code %ERRORLEVEL%
          </script>

  LinuxSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security Group for the Linux Instance
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
      VpcId: !Ref LabVPC

  LinuxInstance:
    Type: AWS::EC2::Instance
    CreationPolicy:
      ResourceSignal:
        Count: 1
        Timeout: PT15M
    DependsOn:
      - PublicSubnetRouteTableAssociation
    Metadata:
      AWS::CloudFormation::Init:
        configSets:
          default:
            - Dependencies
            - AWS
            - Ant
            - Docker
            - Guacamole
            - Java
            - Python
            - Workspace
        Dependencies:
          commands:
            1-Remove-Yum-Packages:
              command: yum remove -y java-1.7.0-openjdk
            2-Install-Yum-Packages:
              command: yum install -y docker java-1.8.0-openjdk java-1.8.0-openjdk-devel gcc openssl-devel bzip2-devel libffi-devel make tar wget
            3-Update-Yum-Packages:
              command: yum update -y
            4-Download-Python3.8:
              command: cd /opt && wget https://www.python.org/ftp/python/3.8.7/Python-3.8.7.tgz
            5-Extract-Python-Zip:
              command: cd /opt && tar xzf Python-3.8.7.tgz
            6-Enable-Python-Optimizations:
              command: cd /opt/Python-3.8.7 && ./configure --enable-optimizations
            7-Python-Make-AltInstall:
              command: cd /opt/Python-3.8.7 && make altinstall
            8-Update-Path-for-Python:
              command: PATH="$PATH:/usr/local/bin"
            9-Install-boto3:
              command: pip3.8 install boto3
            90-Install-EC2-Instance-Connect-CLI:
              command: pip3.8 install ec2instanceconnectcli
              ignoreErrors: "true"
          services:
            sysvinit:
              docker:
                enabled: true
                ensureRunning: true
        AWS:
          commands:
            1-AWS-Default-Region:
              command: !Sub sudo -u ec2-user aws configure set default.region ${AWS::Region}
              waitAfterCompletion: 0
        Ant:
          sources:
            /home/ec2-user/apache-ant-1.10.3: https://aws-tc-largeobjects.s3.amazonaws.com/AWS-200-DEV/v3.4/binaries/packages/apache-ant-1.10.3-bin.zip
          commands:
            1-Ant-Ownership:
              command: chown -R ec2-user:ec2-user /home/ec2-user/apache-ant-1.10.3
            2-Ant-Path:
              command: echo 'PATH=$PATH:/home/ec2-user/apache-ant-1.10.3/bin' >> /home/ec2-user/.bash_profile
            3-Ant-Home:
              command: echo 'ANT_HOME=/home/ec2-user/apache-ant-1.10.3' >> /home/ec2-user/.bash_profile
            4-Ant-Export:
              command: echo 'export ANT_HOME' >> /home/ec2-user/.bash_profile
        Docker:
          commands:
            1-Add-User-To-Group:
              command: usermod -a -G docker ec2-user
        Guacamole:
          files:
            /home/ec2-user/guacamole-home/guacamole.properties:
              content: |
                user-mapping: /guacamole-home/user-mapping.xml
            /home/ec2-user/guacamole-home/user-mapping.xml:
              content: !Sub
                - |
                  <user-mapping>
                    <authorize username="student" password="${EscapedPassword}">
                      <protocol>rdp</protocol>
                      <param name="hostname">${WindowsInstance.PrivateIp}</param>
                      <param name="username">Administrator</param>
                      <param name="password">${EscapedPassword}</param>
                      <param name="security">any</param>
                      <param name="ignore-cert">true</param>
                    </authorize>
                  </user-mapping>
                - EscapedPassword: !Join
                    - "&lt;"
                    - !Split
                      - "<"
                      - !Join
                        - "&amp;"
                        - !Split
                          - "&"
                          - !Ref AdministratorPassword
          commands:
            1-Run-Guacd:
              command: docker run --name guacd -d guacamole/guacd:1.3.0
            2-Run-Guacamole:
              command: docker run --name guacamole --link guacd:guacd -v /home/ec2-user/guacamole-home:/guacamole-home -e GUACAMOLE_HOME=/guacamole-home -d -p 80:8080 guacamole/guacamole:1.3.0
        Java:
          commands:
            1-Java-Home:
              command: echo 'JAVA_HOME=/usr' >> /home/ec2-user/.bash_profile
            2-Java-Export:
              command: echo 'export JAVA_HOME' >> /home/ec2-user/.bash_profile
        Python:
          commands:
            1-Python-Alias:
              command: echo 'alias python=python3.8' >> /home/ec2-user/.bashrc
            2-Pip-Alias:
              command: echo 'alias pip=pip3.8' >> /home/ec2-user/.bashrc
        Workspace:
          sources:
            /home/ec2-user/workdir: !Sub https://${AWS::Region}-tcprod.s3.${AWS::Region}.amazonaws.com/courses/ILT-TF-200-DODEVA/v3.4.18/lab-4-lambda/scripts/workspace.zip
          commands:
            1-Workspace-Ownership:
              command: chown -R ec2-user:ec2-user /home/ec2-user/workdir
    Properties:
      IamInstanceProfile: !Ref InstanceProfile
      ImageId: !Ref LinuxAmiId
      KeyName: !Ref KeyName
      InstanceType: t3.small
      SecurityGroupIds:
        - !Ref LinuxSecurityGroup
      SubnetId: !Ref PublicSubnet
      Tags:
        - Key: Name
          Value: Linux Dev Instance
        - Key: EC2Connect
          Value: "true"
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash -xe
          yum update -y aws-cfn-bootstrap
          /opt/aws/bin/cfn-init --stack ${AWS::StackName} --region ${AWS::Region} --resource LinuxInstance
          /opt/aws/bin/cfn-signal --stack ${AWS::StackName} --region ${AWS::Region} --resource LinuxInstance --exit-code $?

  StudentBoundary:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      ManagedPolicyName: Student-Boundary
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Action:
              - s3:ListAllMyBuckets
            Effect: Allow
            Resource: "*"
          - Action:
              - sts:AssumeRole
            Effect: Allow
            Resource: !Sub "arn:aws:iam::${AWS::AccountId}:role/Student-Role"
          - Action:
              - iam:CreateRole
            Effect: Allow
            Resource: "arn:aws:iam::*:role/lambda_execution_role1"

  InstanceProfilePolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      Description: Managed policy for the InstanceProfile role.
      ManagedPolicyName: InstanceProfilePolicy
      Roles:
        - !Ref InstanceRole
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Sid: AllowedLambdaPermissions
            Effect: Allow
            Action:
              - "lambda:AddPermission"
              - "lambda:CreateFunction"
              - "lambda:GetFunctionConfiguration"
              - "lambda:InvokeFunction"
              - "lambda:RemovePermission"
              - "lambda:UpdateFunctionCode"
              - "lambda:UpdateFunctionConfiguration"
            Resource: "*"
          - Sid: AllowedS3Permissions
            Effect: Allow
            Action:
              - "s3:CreateBucket"
              - "s3:PutBucketOwnershipControls"
              - "s3:PutBucketNotification"
              - "s3:PutBucketPolicy"
              - "s3:PutBucketPublicAccessBlock"
              - "s3:PutObject"
            Resource: "*"
          - Sid: AllowedIamPermissions
            Effect: Allow
            Action:
              - iam:CreateServiceLinkedRole
              - iam:DeleteServiceLinkedRole
            Resource: "arn:aws:iam::*:role/aws-service-role/*"
          - Sid: AllowedIam2Permissions
            Effect: Allow
            Action:
              - "iam:PassRole"
            Resource: "arn:aws:iam::*:role/lambda_execution_role"

  LambdaRole:
    Type: "AWS::IAM::Role"
    Properties:
      RoleName: "lambda_execution_role"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Action:
              - "sts:AssumeRole"
            Principal:
              Service:
                - "lambda.amazonaws.com"
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/AmazonS3ReadOnlyAccess"
        - "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"

  ReadOnlyGroup:
    Type: AWS::IAM::Group
    Properties:
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/ReadOnlyAccess

  GroupAssignment:
    Type: AWS::IAM::UserToGroupAddition
    Properties:
      GroupName: !Ref ReadOnlyGroup
      Users:
        - awsstudent

Outputs:
  Region:
    Description: "Region the lab is running in"
    Value: !Sub ${AWS::Region}

  AdministratorPassword:
    Value: !Ref AdministratorPassword

  GuacamoleLink:
    Value: !Sub http://${LinuxInstance.PublicIp}/guacamole

  LinuxInstanceIP:
    Value: !GetAtt LinuxInstance.PublicIp

  WindowsInstanceIP:
    Value: !GetAtt WindowsInstance.PublicIp
