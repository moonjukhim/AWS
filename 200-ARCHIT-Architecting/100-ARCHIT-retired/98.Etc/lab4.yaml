AWSTemplateFormatVersion: 2010-09-09

Description: 'A lab that shows how to configure High Availability for a Web Application'

Parameters:
  AmazonLinuxAMIID:
    Type: "AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>"
    Default: /aws/service/ami-amazon-linux-latest/al2023-ami-kernel-default-x86_64

Resources:
  VPC:
    Type: 'AWS::EC2::VPC'
    Properties:
      EnableDnsHostnames: true
      CidrBlock: 10.0.0.0/16
      Tags:
        - Key: Name
          Value: Lab VPC

  InternetGateway:
    Type: 'AWS::EC2::InternetGateway'

  AttachGateway:
    Type: 'AWS::EC2::VPCGatewayAttachment'
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway

  PublicSubnet1:
    DependsOn: AttachGateway
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.0.0/24
      MapPublicIpOnLaunch: true
      AvailabilityZone: !Select
        - '0'
        - !GetAZs ''
      Tags:
        - Key: Name
          Value: Public Subnet 1

  PublicSubnet2:
    DependsOn: AttachGateway
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.2.0/24
      MapPublicIpOnLaunch: true
      AvailabilityZone: !Select
        - '1'
        - !GetAZs ''
      Tags:
        - Key: Name
          Value: Public Subnet 2

  PublicRouteTable:
    DependsOn:
      - PublicSubnet1
      - PublicSubnet2
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: Public Route Table

  PublicRoute:
    Type: 'AWS::EC2::Route'
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  PublicSubnet1RouteTableAssociation:
    DependsOn: PublicRoute
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref PublicSubnet1
      RouteTableId: !Ref PublicRouteTable

  PublicSubnet2RouteTableAssociation:
    DependsOn: PublicRoute
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref PublicSubnet2
      RouteTableId: !Ref PublicRouteTable

  ImagesBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref ImagesBucket
      PolicyDocument:
        Statement:
          - Action:
              - 's3:*'
            Effect: Allow
            Resource:
              - !Join
                - '/'
                - - !GetAtt ImagesBucket.Arn
              - !Join
                - '/'
                - - !GetAtt ImagesBucket.Arn
                  - '/*'
            Principal:
                AWS: !GetAtt EC2WebInstanceRole.Arn

  ImagesBucket:
    Type: AWS::S3::Bucket
    Properties:
      AccessControl: Private
      CorsConfiguration:
        CorsRules:
          - AllowedHeaders:
              - "*"
            AllowedMethods:
              - PUT
            AllowedOrigins:
              - "*"

  EmployeesTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: Employees
      AttributeDefinitions:
      - AttributeName: id
        AttributeType: S
      KeySchema:
      - AttributeName: id
        KeyType: HASH
      ProvisionedThroughput:
        ReadCapacityUnits: '5'
        WriteCapacityUnits: '5'

  EC2WebInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      InstanceProfileName: EmployeeDirectoryAppRole
      Path: "/"
      Roles:
      - Ref: EC2WebInstanceRole

  EC2WebInstanceRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: EmployeeDirectoryAppRole
      AssumeRolePolicyDocument:
        Statement:
          - Effect: "Allow"
            Principal:
              Service: ["ec2.amazonaws.com"]
            Action: ["sts:AssumeRole"]
      Policies:
        - PolicyName: DirectoryWebApplicationSSHPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - ec2-instance-connect:SendSSHPublicKey
                Resource:
                  - arn:aws:ec2:*:*:instance/*
                Condition:
                  StringEquals:
                    ec2:osuser: ec2-user

        - PolicyName: DirectoryWebApplicationS3Policy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - "s3:PutObject"
                  - "s3:DeleteObject"
                Resource:
                  - !GetAtt "ImagesBucket.Arn"
        - PolicyName: DirectoryWebApplicationDynamoDBPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - dynamodb:ListTables
                Resource:
                  - Fn::Sub: arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/*
              - Effect: Allow
                Action:
                  - dynamodb:PutItem
                  - dynamodb:DeleteItem
                  - dynamodb:UpdateItem
                  - dynamodb:Scan
                Resource:
                  - Fn::Sub: arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/Employees


  WebSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: Enable HTTP access
      GroupName: Web Security Group
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: Web Security Group
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0

  WebInstance:
    DependsOn:
      - ImagesBucket
      - PublicSubnet1RouteTableAssociation
    Type: 'AWS::EC2::Instance'
    Properties:
      LaunchTemplate:
        LaunchTemplateId: !Ref InstanceTemplate
        Version: !GetAtt InstanceTemplate.LatestVersionNumber
      SourceDestCheck: false
      Tags:
        - Key: Name
          Value: Web Application
      UserData: !Base64
        Fn::Sub: |
            #!/bin/bash -ex
            # Update yum
            yum -y update
            #Install nodejs
            yum -y install nodejs
            #Install stress tool (for load balancing testing)
            yum -y install stress
            # Create a dedicated directory for the application
            mkdir -p /var/app
            # Get the app from s3
            wget https://${AWS::Region}-tcprod.s3.${AWS::Region}.amazonaws.com/courses/ILT-TF-100-TECESS/v5.5.1.prod-386b3673/lab-4/scripts/app.zip
            # Unzip it into a your desired folder
            unzip app.zip -d /var/app/
            cd /var/app/
            # Configure S3 bucket details
            export PHOTOS_BUCKET=${ImagesBucket}
            # Configure default AWS Region
            export DEFAULT_AWS_REGION=${AWS::Region}
            # Enable admin tools for stress testing
            export SHOW_ADMIN_TOOLS=1
            # Install dependencies
            npm install
            # Start your app
            npm start

  InstanceTemplate:
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateName: InstanceTemplate
      LaunchTemplateData:
        IamInstanceProfile:
          Arn: !GetAtt EC2WebInstanceProfile.Arn
        MetadataOptions:
          HttpTokens: optional
          InstanceMetadataTags: enabled
        NetworkInterfaces:
          - DeviceIndex: 0
            AssociatePublicIpAddress: true
            SubnetId: !Ref PublicSubnet1
            Groups:
              - !Ref WebSecurityGroup
        ImageId: !Ref AmazonLinuxAMIID
        InstanceType: t3.micro

Outputs:
  PublicWebApplicationURL:
    Value:
      Fn::Join:
        - ''
        - - http://
          - Fn::GetAtt:
            - WebInstance
            - PublicDnsName

    Description: Employee directory application URL

  DefaultAWSRegion:
    Value: !Ref AWS::Region
    Description: Lab Region

  ImagesBucket:
    Value: !Ref ImagesBucket
    Description: Bucket used to store the employee images