AWSTemplateFormatVersion: "2010-09-09"
Description: "Running Containers on Amazon Elastic Kubernetes Service (EKS) Lab 2: Continuous deployment with GitOps"

Parameters:
  LabVpcCidr:
    Type: String
    Default: 10.10.0.0/16
    AllowedPattern: ^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/(1[6-9]|2[0-8]))$

  BastionHostSubnetCidr:
    Type: String
    Default: 10.10.32.0/19
    AllowedPattern: ^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/(1[6-9]|2[0-8]))$

  EksPublicSubnet1Cidr:
    Type: String
    Default: 10.10.64.0/19
    AllowedPattern: ^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/(1[6-9]|2[0-8]))$

  EksPublicSubnet2Cidr:
    Type: String
    Default: 10.10.96.0/19
    AllowedPattern: ^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/(1[6-9]|2[0-8]))$

  EksPublicSubnet3Cidr:
    Type: String
    Default: 10.10.128.0/19
    AllowedPattern: ^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/(1[6-9]|2[0-8]))$

  LatestAL2AmiId: # Locate latest Amazon Linux 2 AMI from public parameter store
    Type: "AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>"
    Default: "/aws/service/ami-amazon-linux-latest/al2023-ami-kernel-default-x86_64"

  KubernetesVersion:
    Description: The Kubernetes version to deploy on the Amazon EKS cluster
    Type: String
    Default: "1.26"

  ImageRepo1:
    Type: String
    Default: eks-example
    MinLength: 1
    MaxLength: 100

  BranchName:
    Description: CodeCommit branch name
    Type: String
    Default: main

Resources:

  # Start - Create VPC, subnets, internet gateway, and routes
  LabVpc:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref LabVpcCidr
      EnableDnsSupport: true
      EnableDnsHostnames: true
      InstanceTenancy: default
      Tags:
        - Key: Name
          Value: Lab VPC

  BastionHostSubnet:
    Type: AWS::EC2::Subnet
    DependsOn:
      - AttachGateway
    Properties:
      CidrBlock: !Ref BastionHostSubnetCidr
      VpcId: !Ref LabVpc
      MapPublicIpOnLaunch: true
      AvailabilityZone:
        Fn::Select:
          - 0
          - Fn::GetAZs: ""
      Tags:
        - Key: Name
          Value: !Sub Bastion Host Subnet - ${AWS::Region}a

  EksPublicSubnet1:
    Type: AWS::EC2::Subnet
    DependsOn: AttachGateway
    Properties:
      CidrBlock: !Ref EksPublicSubnet1Cidr
      VpcId: !Ref LabVpc
      MapPublicIpOnLaunch: true
      AvailabilityZone:
        Fn::Select:
          - 0
          - Fn::GetAZs: ""
      Tags:
        - Key: Name
          Value: !Sub EKS Public Subnet 1 - ${AWS::Region}a

  EksPublicSubnet2:
    Type: AWS::EC2::Subnet
    DependsOn: AttachGateway
    Properties:
      CidrBlock: !Ref EksPublicSubnet2Cidr
      VpcId: !Ref LabVpc
      MapPublicIpOnLaunch: true
      AvailabilityZone:
        Fn::Select:
          - 1
          - Fn::GetAZs: ""
      Tags:
        - Key: Name
          Value: !Sub EKS Public Subnet 2 - ${AWS::Region}b

  EksPublicSubnet3:
    Type: AWS::EC2::Subnet
    DependsOn: AttachGateway
    Properties:
      CidrBlock: !Ref EksPublicSubnet3Cidr
      VpcId: !Ref LabVpc
      MapPublicIpOnLaunch: true
      AvailabilityZone:
        Fn::Select:
          - 2
          - Fn::GetAZs: ""
      Tags:
        - Key: Name
          Value: !Sub EKS Public Subnet 3 - ${AWS::Region}c

  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: Internet Gateway

  AttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref LabVpc
      InternetGatewayId: !Ref InternetGateway

  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    DependsOn:
      - BastionHostSubnet
      - EksPublicSubnet1
      - EksPublicSubnet2
      - EksPublicSubnet3
    Properties:
      VpcId: !Ref LabVpc

  BastionHostSubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    DependsOn:
      - PublicRoute
    Properties:
      SubnetId: !Ref BastionHostSubnet
      RouteTableId: !Ref PublicRouteTable

  EksPublicSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    DependsOn: PublicRoute
    Properties:
      SubnetId: !Ref EksPublicSubnet1
      RouteTableId: !Ref PublicRouteTable

  EksPublicSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    DependsOn: PublicRoute
    Properties:
      SubnetId: !Ref EksPublicSubnet2
      RouteTableId: !Ref PublicRouteTable

  EksPublicSubnet3RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    DependsOn: PublicRoute
    Properties:
      SubnetId: !Ref EksPublicSubnet3
      RouteTableId: !Ref PublicRouteTable

  PublicRoute:
    Type: AWS::EC2::Route
    DependsOn: AttachGateway
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  BastionHostEip:
    Type: AWS::EC2::EIP
    Properties:
      InstanceId: !Ref BastionHost
  # End - Create VPC, subnets (bastion host, EKS public and private), internet gateway, and routes

  #Start - Create security groups
  BastionHostSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: Bastion host access
      GroupDescription: Network access rules applied to the bastion host
      VpcId: !Ref LabVpc
      SecurityGroupEgress:
        - IpProtocol: tcp
          CidrIp: 0.0.0.0/0
          FromPort: 80
          ToPort: 80
          Description: Allow HTTP connections to anywhere for downloading files
        - IpProtocol: tcp
          CidrIp: 0.0.0.0/0
          FromPort: 443
          ToPort: 443
          Description: Allow HTTPS connections to anywhere for downloading files
        - IpProtocol: tcp
          CidrIp: !Ref EksPublicSubnet1Cidr
          FromPort: 0
          ToPort: 65535
          Description: Allow connections to EKS Public Subnet 1 on any port
        - IpProtocol: tcp
          CidrIp: !Ref EksPublicSubnet2Cidr
          FromPort: 0
          ToPort: 65535
          Description: Allow connections to EKS Public Subnet 2 on any port
        - IpProtocol: tcp
          CidrIp: !Ref EksPublicSubnet3Cidr
          FromPort: 0
          ToPort: 65535
          Description: Allow connections to EKS Public Subnet 3 on any port
        - IpProtocol: tcp
          CidrIp: 0.0.0.0/0
          FromPort: 22
          ToPort: 22
          Description: Allow SSH connections to anywhere for CodeCommit

  ControlPlaneSecurityGroup: # Rules are populated automatically when the cluster is created
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: EKS control plane access
      GroupDescription: Cluster communication with worker nodes
      VpcId: !Ref LabVpc
      SecurityGroupIngress:
        # Allow inbound traffic from the bastion host security group on any port
        - IpProtocol: "-1"
          SourceSecurityGroupId: !Ref BastionHostSecurityGroup
          Description: Allow connections from bastion host subnet on any port
        - IpProtocol: "-1"
          CidrIp: !Ref EksPublicSubnet1Cidr
          Description: Allow connections from EKS Public Subnet 1 on any port
        - IpProtocol: "-1"
          CidrIp: !Ref EksPublicSubnet2Cidr
          Description: Allow connections from EKS Public Subnet 2 on any port
        - IpProtocol: "-1"
          CidrIp: !Ref EksPublicSubnet3Cidr
          Description: Allow connections from EKS Public Subnet 3 on any port
  # End - Create security groups

  # Start - Create bastion host IAM instance profile.
  BastionHostInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      InstanceProfileName: BastionHostIamInstanceProfile
      Roles:
        - !Ref BastionHostIamRole

  BastionHostIamRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: BastionHostIamRole
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Action:
              - sts:AssumeRole
            Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/ReadOnlyAccess
        - arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore
      Policies:
        - PolicyName: ResumeSession
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Resource: "*"
                Effect: Allow
                Action:
                  - ssm:ResumeSession
                  - eks:TagResource
                  - eks:UntagResource
        - PolicyName: codeCommitBranch
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Resource: "*"
                Effect: Allow
                Action:
                  - codecommit:UpdateDefaultBranch
                  - codecommit:CreateBranch
        - PolicyName: sshKeys
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Resource: "*"
                Effect: Allow
                Action:
                  - iam:UploadSSHPublicKey
                  - iam:GetSSHPublicKey
                  - iam:DeleteSSHPublicKey
                  - iam:UpdateSSHPublicKey

  BastionHostBuildPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: BastionHostBuildPolicy
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          # Allow bastion host to assume BastionHostIamRole role
          - Effect: Allow
            Action:
              - sts:AssumeRole
            Resource:
              - !GetAtt BastionHostIamRole.Arn
          - Effect: Allow
            Action:
              - autoscaling:AttachInstances
              - autoscaling:AttachLoadBalancerTargetGroups
              - autoscaling:AttachLoadBalancers
              - autoscaling:CreateAutoScalingGroup
              - autoscaling:CreateLaunchConfiguration
              - autoscaling:CreateOrUpdateTags
              - autoscaling:SetDesiredCapacity
              - autoscaling:UpdateAutoScalingGroup
              - cloudformation:CreateStack
              - ec2:AllocateAddress
              - ec2:AuthorizeSecurityGroupEgress
              - ec2:AuthorizeSecurityGroupIngress
              - ec2:CreateLaunchTemplate
              - ec2:CreateSecurityGroup
              - ec2:CreateTags
              - ec2:ModifySubnetAttribute
              - ec2:ModifyVpcAttribute
              - ec2:RunInstances
              - eks:CreateCluster
              - eks:CreateNodegroup
              - eks:TagResource
              - eks:UpdateClusterConfig
              - eks:UpdateNodegroupConfig
              - iam:AddRoleToInstanceProfile
              - iam:AttachRolePolicy
              - iam:CreateServiceLinkedRole
              - iam:DeleteRolePolicy
              - iam:PassRole
              - ssm:GetParameter
            Resource: "*"
            #added condition to prevent privilege escalation
            Condition:
              StringNotEquals:
                aws:username: awsstudent
          - Effect: Allow
            Action:
              - iam:CreateRole
            Resource: !Sub arn:aws:iam::${AWS::AccountId}:role/eksctl-dev-cluster*
          - Effect: Allow
            Action:
              - ssm:UpdateDocument*
              - ssm:CreateDocument*
              - ssm:DeleteDocument*
            Resource: !Sub arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:document/SSM-SessionManagerRunShell
          - Effect: Allow
            Action:
              - ecr:InitiateLayerUpload
              - ecr:UploadLayerPart
              - ecr:CompleteLayerUpload
              - ecr:PutImage
            Resource: !GetAtt ImageRepoAWSTC.Arn
      Roles:
        - !Ref BastionHostIamRole
  # End - Create bastion host IAM instance profile

  # Start - Create EKS IAM roles
  EksClusterRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: EksClusterRole
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - eks.amazonaws.com
            Action:
              - sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonEKSClusterPolicy
        - arn:aws:iam::aws:policy/ReadOnlyAccess

  EksNodeInstanceRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: EksNodeRole
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonEKSWorkerNodePolicy
        - arn:aws:iam::aws:policy/AmazonEKS_CNI_Policy
        - arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryReadOnly
  # End - Create EKS IAM roles

  # Start - Create bastion host
  BastionHost:
    Type: AWS::EC2::Instance
    DependsOn:
      - ImageRepoAWSTC
      - BastionHostSubnetRouteTableAssociation
      # NOTE - Additional RouteTableAssociation are included because the eksctl create-cluster command launches nodes in these subnets
      - EksPublicSubnet1RouteTableAssociation
      - EksPublicSubnet2RouteTableAssociation
      - EksPublicSubnet3RouteTableAssociation
    Metadata:
      AWS::CloudFormation::Init:
        configSets:
          InstallTools:
            - "update-yum"
            - "install-python3"
            - "create-kube-directory"
            - "install-aws-cli-v2"
            - "install-kubectl"
            - "install-eksctl"
            - "install-other-tools"
            - "install-helm"
            - "install-docker"
          IncreaseSessionMgrTimeout:
            - "inc-session-timeout"
          EksctlCreateCluster:
            - "create-cluster-config"
            - "create-eks-cluster"
          ProcessDockerImage:
            - "download-image-file"
            - "docker-load-image"
            - "push-to-ecr"
          CreateSampleFiles:
            - "create-sample-files"
          CreateSsmUser:
            - "create-ssm-user"
          ChangeDirectoryOwner:
            - "change-ssm-user-directory-owner"
          # CreateUrlencodeScript:
          #   - "create-urlencode-script"
          ModifyInstancePermissions:
            - "remove-lab-build-policy"
        # Start - InstallTools config set commands
        update-yum:
          commands:
            update-yum:
              command: yum update -y
              ignoreErrors: false
        install-python3:
          commands:
            install-python3:
              command: yum install -y python3
              ignoreErrors: false
        create-kube-directory:
          commands:
            a-create-kube-directory:
              command: mkdir -p /home/ssm-user/.kube
              ignoreErrors: false
        install-aws-cli-v2:
          commands:
            a-remove-aws-cli-v1:
              command: rm -rf /usr/bin/aws
              ignoreErrors: false
            b-download-aws-cli-v2:
              command: curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
              ignoreErrors: false
            c-unzip-package:
              command: unzip awscliv2.zip
              ignoreErrors: false
            d-install-aws-cli-v2:
              command: sudo ./aws/install -b
              ignoreErrors: false
        install-kubectl:
          commands:
            a-download-kubectl:
              command: curl -LO -o kubectl https://s3.us-west-2.amazonaws.com/amazon-eks/1.26.4/2023-05-11/bin/linux/amd64/kubectl
              ignoreErrors: false
            b-make-executable:
              command: chmod +x ./kubectl
              ignoreErrors: false
            c-set-path:
              command: mkdir -p $HOME/bin && cp ./kubectl $HOME/bin/kubectl && export PATH=$PATH:$HOME/bin
              ignoreErrors: false
            d-export-path:
              command: echo 'export PATH=$PATH:$HOME/bin' >> ~/.bashrc
              ignoreErrors: false
        install-eksctl:
          commands:
            a-download-eksctl:
              # version has been hardcoded to v.0.139 -- released April 2023
              command: curl --silent --location "https://github.com/weaveworks/eksctl/releases/download/v0.139.0/eksctl_Linux_amd64.tar.gz" | tar xz -C /tmp
            b-move-to-bin:
              command: mv /tmp/eksctl /usr/local/bin
              ignoreErrors: false
        install-other-tools:
          commands:
            a-install-tools:
              command: yum -y install jq gettext bash-completion git
              ignoreErrors: false
        install-helm:
          commands:
            install-helm:
              #command: curl -sSL https://raw.githubusercontent.com/helm/helm/master/scripts/get-helm-3 | bash
              command: curl -L https://git.io/get_helm.sh | bash -s -- --version v3.8.2
              ignoreErrors: false
        install-docker:
          commands:
            a-install-docker:
              command: yum install docker -y
              ignoreErrors: false
            b-start-docker-service:
              command: service docker start
              ignoreErrors: false
        # install-flux:
        #    commands:
        #      a-install-flux:
        #        command: kubectl apply -f https://raw.githubusercontent.com/fluxcd/helm-operator/master/deploy/crds.yaml
        #        ignoreErrors: false
        # Increase the timeout for Session Mgr
        inc-session-timeout:
          files:
            /temp/ssm-settings.yaml:
              content: |
                inputs:
                  s3BucketName: ""
                  s3KeyPrefix: ""
                  s3EncryptionEnabled: true
                  cloudWatchLogGroupName: ""
                  cloudWatchEncryptionEnabled: true
                  idleSessionTimeout: "60"
                  maxSessionDuration: "90"
                  cloudWatchStreamingEnabled: true
                  kmsKeyId: ""
                  runAsEnabled: false
                  runAsDefaultUser: ""
                  shellProfile:
                    linux: cd $HOME; pwd
                schemaVersion: "1.0"
                description: Lab document to modify Session Manager idle timeout and runas user.
                sessionType: Standard_Stream
          commands:
            a-create-ssm-document:
              command: aws ssm create-document --name "SSM-SessionManagerRunShell" --content "file:///temp/ssm-settings.yaml" --document-format YAML --document-type Session
              ignoreErrors: true
            b-configure-ssm:
              command: aws ssm update-document --name "SSM-SessionManagerRunShell" --content "file:///temp/ssm-settings.yaml" --document-format YAML --document-version '$LATEST'
              ignoreErrors: true
        # Start - EksctlCreateCluster config set commands
        create-cluster-config:
          files:
            /home/ssm-user/scripts/cluster.yaml:
              content: !Sub |
                apiVersion: eksctl.io/v1alpha5
                kind: ClusterConfig
                metadata:
                  name: dev-cluster
                  region: ${AWS::Region}
                  version: "${KubernetesVersion}"
                vpc:
                  id: ${LabVpc}
                  securityGroup: "${ControlPlaneSecurityGroup}"
                  subnets:
                    public:
                      ${AWS::Region}a: { id: ${EksPublicSubnet1} }
                      ${AWS::Region}b: { id: ${EksPublicSubnet2} }
                      ${AWS::Region}c: { id: ${EksPublicSubnet3} }
                  clusterEndpoints:
                    publicAccess: true
                    privateAccess: true
                iam:
                  serviceRoleARN: "${EksClusterRole.Arn}"
                managedNodeGroups:
                  - name: dev-nodes
                    minSize: 2
                    maxSize: 4
                    desiredCapacity: 3
                    volumeSize: 20
                    instanceType: t3.medium
                    iam:
                      instanceRoleARN: ${EksNodeInstanceRole.Arn}
        create-eks-cluster:
          commands:
            eksctl-create-cluster:
              command: eksctl create cluster -f /home/ssm-user/scripts/cluster.yaml --kubeconfig /home/ssm-user/.kube/config
              ignoreErrors: false
        # Start - Process Docker image
        download-image-file:
          commands:
            a-make-lab-dir:
              command: mkdir -p /lab
              ignoreErrors: false
            b-download-image-file:
              command: aws s3 cp s3://aws-tc-largeobjects/ILT-TF-200-COREKS-10-EN/lab-3/eks-ilt-lab3.tar /lab/
              ignoreErrors: false
        docker-load-image:
          commands:
            docker-load-image:
              command: docker load -i /lab/eks-ilt-lab3.tar
        push-to-ecr:
          commands:
            a-authenticate-to-ecr:
              command: !Sub aws ecr get-login-password --region ${AWS::Region} | docker login --username AWS --password-stdin ${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com
              ignoreErrors: false
            b-tag-image:
              command: !Sub docker tag nginx:mainline-alpine ${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/awstc:eks-ilt-lab3
              ignoreErrors: false
            c-push-image:
              command: !Sub docker push ${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/awstc:eks-ilt-lab3
              ignoreErrors: false
        # Start - Create sample files
        create-sample-files:
          files:
            /lab/task3/website-example/Dockerfile:
              content: !Sub |
                #1.0
                FROM ${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/awstc:eks-ilt-lab3
                RUN rm /etc/nginx/conf.d/*
                ADD src/hello.conf /etc/nginx/conf.d/
                ADD src/index.html /usr/share/nginx/html/
            /lab/task3/website-example/src/hello.conf:
              source: https://aws-tc-largeobjects.s3-us-west-2.amazonaws.com/ILT-TF-200-COREKS-10-EN/lab-3/hello.conf
            /lab/task3/website-example/src/index.html:
              source: https://aws-tc-largeobjects.s3-us-west-2.amazonaws.com/ILT-TF-200-COREKS-10-EN/lab-3/index.html
            /lab/task4/eks-example-deployment.yaml:
              content: !Sub |
                apiVersion: apps/v1
                kind: Deployment
                metadata:
                  name: eks-example
                  namespace: eks-example
                  labels:
                    app: eks-example
                  annotations:
                    # Container Image Automated Updates
                    flux.weave.works/automated: "true"
                    # do not apply this manifest on the cluster
                    #flux.weave.works/ignore: "true"
                spec:
                  replicas: 1
                  selector:
                    matchLabels:
                      app: eks-example
                  template:
                    metadata:
                      labels:
                        app: eks-example
                    spec:
                      containers:
                      - name: eks-example
                        image: ${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/eks-example:latest
                        imagePullPolicy: IfNotPresent
                        ports:
                        - containerPort: 80
                          name: http
                          protocol: TCP
                        livenessProbe:
                          httpGet:
                            path: /
                            port: http
                        readinessProbe:
                          httpGet:
                            path: /
                            port: http
        # Start - Create ssm-user and assign as sudoer
        create-ssm-user:
          commands:
            a-create-ssm-user:
              command: if id -u "ssm-user" >/dev/null 2>&1; then echo 'ssm-user already exists'; else useradd ssm-user -m -U; fi
              ignoreErrors: false
            b-make-ssm-user-sudoer:
              command: echo "ssm-user  ALL=(ALL) NOPASSWD:ALL" | sudo tee /etc/sudoers.d/ssm-user
        # Start - Change ownership of ssm-user home directory and all sub-directories
        change-ssm-user-directory-owner:
          commands:
            a-set-owner-ssm-user:
              command: chown -R ssm-user /home/ssm-user
              ignoreErrors: false
            b-lab-dir-access:
              command: chmod 777 /lab
              ignoreErrors: false
        # Start - Create python script
        # create-urlencode-script:
        #   files:
        #     /home/ssm-user/scripts/urlencode.py:
        #       source: https://aws-tc-largeobjects.s3.us-west-2.amazonaws.com/ILT-TF-200-COREKS-10-EN/lab-3/urlencode.py
        #   commands:
        #     change-permissions:
        #       command: sudo chmod +x /home/ssm-user/scripts/urlencode.py
        remove-lab-build-policy:
          commands:
            remove-lab-build-policy:
              command: !Sub /usr/local/bin/aws iam delete-role-policy --role-name ${BastionHostIamRole} --policy-name BastionHostBuildPolicy
    Properties:
      ImageId: !Ref LatestAL2AmiId
      InstanceType: t3.micro
      IamInstanceProfile: !Ref BastionHostInstanceProfile
      Tags:
        - Key: Name
          Value: Bastion Host
      InstanceInitiatedShutdownBehavior: terminate
      BlockDeviceMappings:
        - DeviceName: /dev/xvda
          Ebs:
            VolumeSize: 8
            DeleteOnTermination: true
            VolumeType: gp2
      NetworkInterfaces:
        - AssociatePublicIpAddress: true
          DeviceIndex: "0"
          GroupSet:
            - !Ref BastionHostSecurityGroup
          SubnetId: !Ref BastionHostSubnet
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          yum update -y aws-cfn-bootstrap
          /opt/aws/bin/cfn-init -v --stack ${AWS::StackName} --resource BastionHost --configsets InstallTools,IncreaseSessionMgrTimeout,EksctlCreateCluster,ProcessDockerImage,CreateSampleFiles,CreateSsmUser,ChangeDirectoryOwner,ModifyInstancePermissions --region ${AWS::Region}
          /opt/aws/bin/cfn-signal -e $? --stack ${AWS::StackName} --resource BastionHost --region ${AWS::Region}
    CreationPolicy:
      ResourceSignal:
        Count: '1'
        Timeout: PT45M
  # End - Create bastion host

  CodeBuildServiceRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: CodeBuildServiceRole
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action:
              - sts:AssumeRole
            Principal:
              Service:
                - codebuild.amazonaws.com

  CodeBuildServicePolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: CodeBuildServicePolicy
      Roles:
        - !Ref CodeBuildServiceRole
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action:
              - logs:CreateLogGroup
              - logs:CreateLogStream
              - logs:PutLogEvents
            Resource: "arn:aws:logs:*:*:*"
          - Effect: Allow
            Action:
              - "s3:GetObject"
              - "s3:GetObjectVersion"
              - "s3:PutObject"
            Resource:
              - !Sub arn:aws:s3:::codepipeline-${AWS::Region}-*/*
              - !Sub arn:aws:s3:::${CodePipelineArtifactBucket}/*
          - Effect: Allow
            Action:
              - ecr:GetAuthorizationToken
              - ecr:InitiateLayerUpload
              - ecr:UploadLayerPart
              - ecr:CompleteLayerUpload
              - ecr:BatchCheckLayerAvailability
              - ecr:PutImage
              - ecr:BatchGetImage
              - ecr:GetDownloadUrlForLayer
            Resource: "*"

  CodePipelineServiceRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: CodePipelineServiceRole
      Path: /
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action:
              - sts:AssumeRole
            Principal:
              Service:
                - codepipeline.amazonaws.com
      Policies:
        - PolicyName: codepipeline-access
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Resource: "*"
                Effect: Allow
                Action:
                  - codebuild:StartBuild
                  - codebuild:BatchGetBuilds
                  - iam:PassRole
                  - codebuild:UpdateProject
                  - codecommit:GetBranch
                  - codecommit:GetCommit
                  - codecommit:GetComment
                  - codecommit:UploadArchive
                  - codecommit:GetUploadArchiveStatus
              - Resource: !Sub arn:aws:s3:::${CodePipelineArtifactBucket}/*
                Effect: Allow
                Action:
                  - s3:PutObject*
                  - s3:GetObject
                  - s3:GetObjectVersion
                  - s3:GetBucketVersioning
    DependsOn: CodePipelineArtifactBucket

  ImageRepo:
    Type: AWS::ECR::Repository
    Properties:
      RepositoryName: !Ref ImageRepo1

  ImageRepoAWSTC:
    Type: AWS::ECR::Repository
    Properties:
      RepositoryName: awstc

  CodePipelineArtifactBucket:
    Type: AWS::S3::Bucket
    Properties:
      PublicAccessBlockConfiguration: #Sets "Block all public access" to "On" for the bucket
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true

  CodeBuildProject:
    Type: AWS::CodeBuild::Project
    Properties:
      Artifacts:
        Type: CODEPIPELINE
      Source:
        Type: CODEPIPELINE
        BuildSpec: |
          version: 0.2
          phases:
            install:
              commands:
                - rm /var/run/docker.pid
            pre_build:
              commands:
                - echo "Starting docker daemon..."
                - nohup /usr/local/bin/dockerd -H tcp://127.0.0.1:2375 -H unix:///var/run/docker.sock -s overlay2 &
                - timeout 15 sh -c "until docker info; do echo .; sleep 1; done"
                - echo "Logging into Amazon ECR..."
                - aws ecr get-login-password | docker login --username AWS --password-stdin ${ACCOUNTID}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com
                - COMMIT_HASH=$(echo $CODEBUILD_RESOLVED_SOURCE_VERSION | cut -c 1-7)
                - TAG1="$(echo $CODEBUILD_RESOLVED_SOURCE_VERSION | head -c 8)"
                - TAG2="$(head -n 1 Dockerfile | sed 's/#//')"
                - echo "Environment Variables:"
                - printenv
            build:
              commands:
                - echo Build started on `date`
                - docker build -t $REPOSITORY_URI:latest .
                - docker tag $REPOSITORY_URI:latest $REPOSITORY_URI:$TAG1
                - docker tag $REPOSITORY_URI:latest $REPOSITORY_URI:$TAG2
            post_build:
              commands:
                - echo Build completed on `date`
                - echo "Pushing Docker image to ECR"
                - docker push "${REPOSITORY_URI}:latest"
                - docker push "${REPOSITORY_URI}:${TAG1}"
                - docker push "${REPOSITORY_URI}:${TAG2}"
                - printf '{"Tag":"%s","RepositoryUri":"%s"}' $TAG1 $REPOSITORY_URI $PROJECT_NAME $ARTIFACT_BUCKET > build.json
      Environment:
        ComputeType: BUILD_GENERAL1_SMALL
        Type: LINUX_CONTAINER
        Image: "aws/codebuild/standard:5.0"
        PrivilegedMode: true
        EnvironmentVariables:
          - Name: AWS_DEFAULT_REGION
            Value: !Ref AWS::Region
          - Name: ACCOUNTID
            Value: !Ref AWS::AccountId
          - Name: REPOSITORY_URI
            Value: !Sub >-
              ${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/${ImageRepo1}
      Name: sample-app
      ServiceRole: !Sub arn:aws:iam::${AWS::AccountId}:role/CodeBuildServiceRole
    DependsOn: CodeBuildServiceRole

  AppPipeline:
    Type: AWS::CodePipeline::Pipeline
    Properties:
      Name: Application-pipeline
      RoleArn: !GetAtt CodePipelineServiceRole.Arn
      Stages:
        - Name: Source
          Actions:
            - Name: SourceAction
              ActionTypeId:
                Category: Source
                Owner: AWS
                Version: "1"
                Provider: CodeCommit
              OutputArtifacts:
                - Name: SourceOutput
              Configuration:
                BranchName: !Ref BranchName
                RepositoryName: !Ref ImageRepo1
                PollForSourceChanges: false
              RunOrder: 1
        - Name: AppBuild
          Actions:
            - Name: AppBuildAction
              InputArtifacts:
                - Name: SourceOutput
              ActionTypeId:
                Category: Test
                Owner: AWS
                Version: "1"
                Provider: CodeBuild
              Configuration:
                ProjectName: sample-app
              RunOrder: 1
      ArtifactStore:
        Type: S3
        Location: !Ref CodePipelineArtifactBucket

  # Start - Create IAM User for use with Git credentials
  gitUser:
    Type: AWS::IAM::User
    Properties:
      Policies:
        - PolicyName: codecommit-restricted
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Resource: "*"
                Effect: Allow
                Action:
                  - codebuild:StartBuild
                  - codebuild:BatchGetBuilds
                  - codecommit:MergeBranchesBySquash
                  - codecommit:TagResource
                  - codecommit:PutFile
                  - codecommit:CreateCommit
                  - codecommit:GetCommentsForComparedCommit
                  - codecommit:MergeBranchesByFastForward
                  - codecommit:GetCommit
                  - codecommit:GetComment
                  - codecommit:GetCommitHistory
                  - codecommit:GetDifferences
                  - codecommit:GetCommitsFromMergeBase
                  - codecommit:GetBranch
                  - codecommit:GetMergeCommit
                  - codecommit:DeleteFile
                  - codecommit:GetPullRequest
                  - codecommit:List*
                  - codecommit:GitPull
                  - codecommit:GitPush
      UserName: gitUser

  # Start - Create group to allow read-only access to all services and assign student user account to it
Outputs:
  AwsRegion:
    Description: The AWS Region that the lab is running in
    Value: !Ref AWS::Region

