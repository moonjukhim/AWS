AWSTemplateFormatVersion: "2010-09-09"
Description: "Running Containers on Amazon Elastic Kubernetes Service (EKS) Lab 1: Building an Amazon EKS Cluster"

Parameters:
  # Use public Systems Manager parameter to get latest Amazon Linux 2 AMI
  LabVpcCidr:
    Type: String
    Default: 10.10.0.0/16
    AllowedPattern: ^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/(1[6-9]|2[0-8]))$

  BastionHostSubnetCidr:
    Type: String
    Default: 10.10.32.0/19
    AllowedPattern: ^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/(1[6-9]|2[0-8]))$

  LatestAL2AmiId: # Locate latest Amazon Linux 2 AMI from public parameter store
    Type: "AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>"
    Default: "/aws/service/ami-amazon-linux-latest/amzn2-ami-hvm-x86_64-gp2"

  S3Url:
    Type: String
    Default: "https://aws-tc-largeobjects.s3-us-west-2.amazonaws.com/prevention/yml"

  S3Bucket:
    Type: String
    Default: "aws-tc-largeobjects"

Resources:

  # Start - Create VPC, subnets, internet gateway, and routes
  LabVpc:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref LabVpcCidr
      EnableDnsSupport: true
      EnableDnsHostnames: true
      InstanceTenancy: default
      Tags:
        - Key: Name
          Value: Lab VPC

  BastionHostSubnet:
    Type: AWS::EC2::Subnet
    DependsOn:
      - AttachGateway
    Properties:
      CidrBlock: !Ref BastionHostSubnetCidr
      VpcId: !Ref LabVpc
      MapPublicIpOnLaunch: true
      AvailabilityZone:
        Fn::Select:
          - 0
          - Fn::GetAZs: ""
      Tags:
        - Key: Name
          Value: !Sub Bastion Host Subnet - ${AWS::Region}a

  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: Internet Gateway

  AttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref LabVpc
      InternetGatewayId: !Ref InternetGateway

  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    DependsOn:
      - BastionHostSubnet
    Properties:
      VpcId: !Ref LabVpc

  BastionHostSubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    DependsOn:
      - PublicRoute
    Properties:
      SubnetId: !Ref BastionHostSubnet
      RouteTableId: !Ref PublicRouteTable

  PublicRoute:
    Type: AWS::EC2::Route
    DependsOn: AttachGateway
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  BastionHostEip:
    Type: AWS::EC2::EIP
    Properties:
      InstanceId: !Ref BastionHost
  # End - Create VPC, subnets, internet gateway, and routes

  # Create security group for bastion host
  BastionHostSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: Bastion host access
      GroupDescription: Network access rules applied to the bastion host
      VpcId: !Ref LabVpc
      SecurityGroupEgress:
        - IpProtocol: tcp
          CidrIp: 0.0.0.0/0
          FromPort: 80
          ToPort: 80
          Description: Allow HTTP connections to anywhere for downloading files
        - IpProtocol: tcp
          CidrIp: 0.0.0.0/0
          FromPort: 443
          ToPort: 443
          Description: Allow HTTPS connections to anywhere for downloading files

  # Start - Create bastion host IAM instance profile
  BastionHostInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      InstanceProfileName: BastionHostIamInstanceProfile
      Roles:
        - !Ref BastionHostIamRole

  BastionHostIamRole:
    Type: AWS::IAM::Role
    Properties:
      Tags:
        - Key: iam
          Value: restricted
      RoleName: BastionHostIamRole
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Action:
              - sts:AssumeRole
            Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/ReadOnlyAccess
        - arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore
      Policies:
        - PolicyName: ResumeSession
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Resource: "*"
                Effect: Allow
                Action:
                  - ssm:ResumeSession
                  - eks:TagResource
                  - eks:UntagResource

  BastionHostRolePolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: BastionHostPolicy
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          # Allow bastion host to assume BastionHostIamRole role.
          - Effect: Allow
            Action:
              - sts:AssumeRole
            Resource:
              - !GetAtt BastionHostIamRole.Arn
          - Effect: Allow
            Action:
              - autoscaling:AttachInstances
              - autoscaling:AttachLoadBalancerTargetGroups
              - autoscaling:AttachLoadBalancers
              - autoscaling:CreateAutoScalingGroup
              - autoscaling:CreateLaunchConfiguration
              - autoscaling:CreateOrUpdateTags
              - autoscaling:SetDesiredCapacity
              - autoscaling:UpdateAutoScalingGroup
              - cloudformation:CreateStack
              - ec2:AllocateAddress
              - ec2:AssociateRouteTable
              - ec2:AttachInternetGateway
              - ec2:AuthorizeSecurityGroupEgress
              - ec2:AuthorizeSecurityGroupIngress
              - ec2:CreateLaunchTemplate
              - ec2:CreateInternetGateway
              - ec2:CreateNatGateway
              - ec2:CreateRoute
              - ec2:CreateRouteTable
              - ec2:CreateSecurityGroup
              - ec2:CreateSubnet
              - ec2:CreateTags
              - ec2:CreateVpc
              - ec2:ModifySubnetAttribute
              - ec2:ModifyVpcAttribute
              - eks:CreateCluster
              - eks:CreateNodegroup
              - eks:TagResource
              - eks:UpdateClusterConfig
              - eks:UpdateNodegroupConfig
              - iam:CreateServiceLinkedRole
              - iam:DeleteRolePolicy
              - iam:AddRoleToInstanceProfile
              - iam:TagRole
              - iam:AttachRolePolicy
              - ssm:GetParameter
            Resource: "*"
            #added condition to prevent privilege escalation
            Condition:
              StringNotEquals:
                aws:username: "awsstudent"
                aws:ResourceTag/iam: "restricted"
          - Effect: Allow
            Action:
              - iam:AttachRolePolicy
            Resource:
              - !Sub arn:aws:iam::${AWS::AccountId}:role/eksctl-dev-cluster-cluster-ServiceRole*
              - !Sub arn:aws:iam::${AWS::AccountId}:role/eksctl-dev-cluster-nodegroup-dev-NodeInstanceRole*
            Condition:
              ArnLike:
                iam:PolicyARN:
                  - arn:aws:iam::aws:policy/AmazonEKSClusterPolicy
                  - arn:aws:iam::aws:policy/AmazonEKSVPCResourceController
                  - arn:aws:iam::aws:policy/AmazonEKSWorkerNodePolicy
                  - arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryReadOnly
                  - arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore
                  - arn:aws:iam::aws:policy/AmazonEKS_CNI_Policy
                  - arn:aws:iam::aws:policy/eksctl-dev-cluster-cluster-PolicyCloudWatchMetrics
                  - arn:aws:iam::aws:policy/eksctl-dev-cluster-cluster-PolicyELBPermissions
          - Effect: Allow
            Action:
              - ec2:RunInstances
            Resource: "*"
          - Effect: Allow
            Action:
              - iam:CreateRole
              - iam:PutRolePolicy
              - iam:PassRole
            Resource: !Sub arn:aws:iam::${AWS::AccountId}:role/eksctl-dev-cluster*
          - Effect: Allow
            Action:
              - ssm:UpdateDocument*
              - ssm:CreateDocument*
              - ssm:DeleteDocument*
            Resource: !Sub arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:document/SSM-SessionManagerRunShell
          - Sid: limitedSize
            Effect: Deny
            Action: ec2:RunInstances
            Resource: arn:aws:ec2:*:*:instance/*
            Condition:
              ForAnyValue:StringNotLike:
                ec2:InstanceType:
                  - 't3.medium'
      Roles:
        - !Ref BastionHostIamRole
  # End - Create bastion host IAM instance profile

  # Start - Create bastion host
  BastionHost:
    Type: AWS::EC2::Instance
    DependsOn:
      - BastionHostSubnetRouteTableAssociation
    Metadata:
      AWS::CloudFormation::Init:
        configSets:
          InstallTools:
            - "update-yum"
            - "install-python3"
            - "install-aws-cli-v2"
            - "install-other-tools"
          CreateSSMuser:
            - "create-ssm-user"
          IncreaseSessionMgrTimeout:
            - "inc-session-timeout"
          ChangeDirectoryOwner:
            - "change-ssm-user-directory-owner"
        # Start - InstallTools config set commands
        update-yum:
          commands:
            update-yum:
              command: yum update -y
              ignoreErrors: false
        install-python3:
          commands:
            install-python3:
              command: yum install -y python3
              ignoreErrors: false
        install-aws-cli-v2:
          commands:
            a-remove-aws-cli-v1:
              command: rm -rf /usr/bin/aws
              ignoreErrors: false
            b-download-aws-cli-v2:
              command: curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
              ignoreErrors: false
            c-unzip-package:
              command: unzip awscliv2.zip
              ignoreErrors: false
            d-install-aws-cli-v2:
              command: sudo ./aws/install -b
              ignoreErrors: false
        install-other-tools:
          commands:
            a-install-tools:
              command: yum -y install jq gettext bash-completion git
              ignoreErrors: false
        # Start - SSM user Creation
        create-ssm-user:
          commands:
            create-ssm-user:
              command: if id -u "ssm-user" >/dev/null 2>&1; then echo 'ssm-user already exists'; else useradd ssm-user -m -U; fi
              ignoreErrors: false
            make-ssm-user-sudoer:
              command: echo "ssm-user  ALL=(ALL) NOPASSWD:ALL" | sudo tee /etc/sudoers.d/ssm-user
        # Increase the timeout for Session Mgr
        inc-session-timeout:
          files:
            /temp/ssm-settings.yaml:
              content: |
                inputs:
                  s3BucketName: ""
                  s3KeyPrefix: ""
                  s3EncryptionEnabled: true
                  cloudWatchLogGroupName: ""
                  cloudWatchEncryptionEnabled: true
                  idleSessionTimeout: "60"
                  maxSessionDuration: "90"
                  cloudWatchStreamingEnabled: true
                  kmsKeyId: ""
                  runAsEnabled: false
                  runAsDefaultUser: ""
                  shellProfile:
                    linux: cd $HOME; pwd
                schemaVersion: "1.0"
                description: Lab document to modify Session Manager idle timeout and runas user.
                sessionType: Standard_Stream
          commands:
            create-ssm-document:
              command: aws ssm create-document --name "SSM-SessionManagerRunShell" --content "file:///temp/ssm-settings.yaml" --document-format YAML --document-type Session
              ignoreErrors: true
            configure-ssm:
              command: aws ssm update-document --name "SSM-SessionManagerRunShell" --content "file:///temp/ssm-settings.yaml" --document-format YAML --document-version '$LATEST'
              ignoreErrors: true
        # Start - Change ownership of ssm-user home directory and all sub-directories
        change-ssm-user-directory-owner:
          commands:
            set-owner-ssm-user:
              command: chown -R ssm-user /home/ssm-user
              ignoreErrors: false
    Properties:
      ImageId: !Ref LatestAL2AmiId
      InstanceType: t3.medium
      IamInstanceProfile: !Ref BastionHostInstanceProfile
      Tags:
        - Key: Name
          Value: Bastion Host
      InstanceInitiatedShutdownBehavior: terminate
      BlockDeviceMappings:
        - DeviceName: /dev/xvda
          Ebs:
            VolumeSize: 8
            DeleteOnTermination: true
            VolumeType: gp2
      NetworkInterfaces:
        - AssociatePublicIpAddress: true
          DeviceIndex: "0"
          GroupSet:
            - !Ref BastionHostSecurityGroup
          SubnetId: !Ref BastionHostSubnet
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          yum update -y aws-cfn-bootstrap
          /opt/aws/bin/cfn-init -v --stack ${AWS::StackName} --resource BastionHost --configsets InstallTools,CreateSSMuser,IncreaseSessionMgrTimeout,ChangeDirectoryOwner --region ${AWS::Region}
          /opt/aws/bin/cfn-signal -e $? --stack ${AWS::StackName} --resource BastionHost --region ${AWS::Region}
    CreationPolicy:
      ResourceSignal:
        Count: '1'
        Timeout: PT10M
  # End - Create bastion host

  # Create read-only access to all services for awsstudent user
Outputs:
  AwsRegion:
    Description: The AWS Region that the lab is running in
    Value: !Ref AWS::Region
