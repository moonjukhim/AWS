AWSTemplateFormatVersion: "2010-09-09"
Description: Advanced Developing on AWS - Lab 3 Template

Parameters:
  FileAssetsBucketKmsKeyId:
    Description: Empty to create a new key (default), 'AWS_MANAGED_KEY' to use a managed S3 key, or the ID/ARN of an existing key.
    Default: ""
    Type: String

  Qualifier:
    Description: An identifier to distinguish multiple bootstrap stacks in the same environment
    Default: cdk8487
    Type: String
    AllowedPattern: "[A-Za-z0-9_-]{1,10}"
    ConstraintDescription: Qualifier must be an alphanumeric identifier of at most 10 characters

  LabPoolId:
    Type: String

  LabUserRoleName:
    Type: String

  LabVpcCidr:
    Description: The CIDR Block for the Lab's VPC.
    Type: String
    Default: 10.0.0.0/16
    AllowedPattern: '^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/(3[0-2]|[1-2][0-9]|[0-9]))$'

  PublicSubnetCidr:
    Description: The CIDR Block for the Public Subnet.
    Type: String
    Default: 10.0.1.0/24
    AllowedPattern: '^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/(3[0-2]|[1-2][0-9]|[0-9]))$'

  Cloud9VolumeSize:
    Type: Number
    Description: The size (in GB) of the Cloud9 EBS volume.
    Default: 40

  Cloud9InstanceType:
    Type: String
    Description: The instance type of the Cloud9 EC2 instance.
    Default: t3.medium
    AllowedValues:
      - t3.micro
      - t3.medium
      - t3.large

  Cloud9AutomaticStopTimeMinutes:
    Type: Number
    Description: The number of minutes until the Cloud9 environment is shut down after it was last used. (Should be the same as the lab duration.)
    Default: 120

  Cloud9ImageId:
    Type: String
    Description: The AMI alias of the image to use with Cloud9.
    Default: amazonlinux-2-x86_64
    AllowedValues:
      - amazonlinux-2-x86_64
      - ubuntu-18.04-x86_64

Resources:
  PopulatedBucket:
    Type: "AWS::S3::Bucket"
    Properties:
      BucketName: !Join
        - "-"
        - - "populate-bucket"
          - !Select
            - 0
            - !Split
              - "-"
              - !Select
                - 2
                - !Split
                  - "/"
                  - !Ref "AWS::StackId"
      PublicAccessBlockConfiguration:
        BlockPublicPolicy: false
        RestrictPublicBuckets: false

  PopulateBucket:
    Type: Custom::PopulateBucket
    Properties:
      ServiceToken: !GetAtt PopulateBucketFunction.Arn

  PopulateBucketFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: PopulateBucket
      Handler: index.handler
      MemorySize: 128
      Timeout: 180
      Role: !GetAtt PopulateBucketRole.Arn
      Runtime: python3.11
      Code:
        ZipFile: !Sub |
          import boto3
          import json
          import urllib3
          http = urllib3.PoolManager()
          def send_response(event, context, status, reason, data):
              body = json.dumps({
                  "Status": status,
                  "Reason": reason,
                  "PhysicalResourceId": context.log_stream_name,
                  "StackId": event.get("StackId"),
                  "RequestId": event.get("RequestId"),
                  "LogicalResourceId": event.get("LogicalResourceId"),
                  "NoEcho": False,
                  "Data": data
              })
              http.request(
                  "PUT",
                  event.get("ResponseURL"),
                  body=body,
                  headers={
                      "Content-Type": "",
                      "Content-Length": str(len(body))
                  }
              )
          def handler(event, context):
              try:
                  # Variables
                  source_bucket_name = "${AWS::Region}-tcprod"
                  source_bucket_prefix = "courses/ILT-DD-300-ADVDEV/v1.5.24.prod-40c4c288/lab-3-cdk/scripts/"
                  destination_bucket_name = "${PopulatedBucket}"
                  destination_bucket_prefix = ""
                  # Only handle 'Create' requests.
                  if event.get("RequestType") == "Create":
                      # Create the S3 resource and bucket objects.
                      s3 = boto3.resource("s3")
                      source_bucket = s3.Bucket(source_bucket_name)
                      destination_bucket = s3.Bucket(destination_bucket_name)
                      # Copy all objects from the source to the destination.
                      for source_object in source_bucket.objects.filter(Prefix=source_bucket_prefix):
                          destination_bucket.copy({"Bucket": source_bucket_name, "Key": source_object.key}, source_object.key.replace(source_bucket_prefix, destination_bucket_prefix))
                      # Send the 'SUCCESS' response.
                      send_response(event, context, "SUCCESS", f"Copied S3 Objects from s3://{source_bucket_name}/{source_bucket_prefix} to s3://{destination_bucket_name}/{destination_bucket_prefix}", {})
                  else:
                      # Send the 'SUCCESS' response.
                      send_response(event, context, "SUCCESS", f"No Action Performed", {})
              except Exception as exception:
                  # Send the 'FAILED' response.
                  send_response(event, context, "FAILED", str(exception), {})

  PopulateBucketRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: PopulateBucketRole
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: PopulateBucket
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              Effect: Allow
              Action:
                - s3:CreateBucket
                - s3:ListBucket
                - s3:GetObject
                - s3:PutObject
                - s3:PutObjectAcl
              Resource:
                - "*"

  PopulatedBucketPolicy:
    Type: "AWS::S3::BucketPolicy"
    Properties:
      Bucket: !Ref PopulatedBucket
      PolicyDocument:
        Statement:
          - Action:
              - s3:GetObject
            Effect: Allow
            Resource: !Sub arn:aws:s3:::${PopulatedBucket}/*
            Principal: "*"

  ###########
  # Creates the MyappCdkStack-s3ImageServiceRole.
  # Has the AWSLambdaBasicExecutionRole attached to it.
  ###########

  s3ImageServiceRole:
    Type: "AWS::IAM::Role"
    Properties:
      RoleName: s3ImageServiceRole
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action: "sts:AssumeRole"
      Path: /
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
        - !Ref RekognitionPolicy

  ###########
  # Creates the MyappCdkStack-s3FunctionServiceRole role.
  # Has the AWSLambdaBasicExecutionRole attached to it.
  # Has the s3FunctionServiceRoleDefaultPolicy managed policy attached to it.
  ###########

  s3FunctionServiceRole:
    Type: "AWS::IAM::Role"
    Properties:
      RoleName: s3FunctionServiceRole
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action: "sts:AssumeRole"
      Path: /
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
        - !Ref s3FunctionPolicy

  ###########
  # Creates the s3FunctionServiceRoleDefaultPolicy managed policy.
  ###########

  s3FunctionPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      Description: Managed policy for the s3FunctionServiceRole.
      ManagedPolicyName: s3FunctionServiceRoleDefaultPolicy
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Sid: statesPermissions
            Effect: Allow
            Action:
              - "states:StartExecution"
              - "states:CreateStateMachine"
              - "states:TagResource"
              - "states:GetExecutionHistory"
              - "states:GetActivityTask"
              - "states:DeleteStateMachine"
              - "states:UpdateStateMachine"
            Resource: "*"

  ###########
  # Creates the MyappCdkStack-rekognitionRole role.
  # Has the rekognitionRoleDefaultPolicy managed policy attached to it.
  ###########

  RekognitionRole:
    Type: "AWS::IAM::Role"
    Properties:
      RoleName: rekognitionRole
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action: "sts:AssumeRole"
      Path: /
      ManagedPolicyArns:
        - !Ref RekognitionPolicy

  ###########
  # Creates the rekognitionRoleDefaultPolicy managed policy.
  ###########

  RekognitionPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      Description: Managed policy for the rekognitionRole.
      ManagedPolicyName: rekognitionRoleDefaultPolicy
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Sid: rekognitionPermissions
            Effect: Allow
            Action:
              - "rekognition:Get*"
              - "rekognition:List*"
              - "rekognition:Describe*"
              - "rekognition:Detect*"
            Resource: "*"
          - Sid: snsPermissions
            Effect: Allow
            Action:
              - "sns:Get*"
              - "sns:List*"
              - "sns:Publish"
              - "sns:Subscribe"
            Resource: "*"
          - Sid: s3Permissions
            Effect: Allow
            Action:
              - "s3:CreateBucket"
              - "s3:Get*"
              - "s3:List*"
              - "s3:ListBucket"
            Resource: "*"

  ###########
  # Creates the MyappCdkStack-StateMachineRole role.
  # Has the StateMachineRoleDefaultPolicy policy managed policy attached to it.
  ###########

  StateMachineRole:
    Type: "AWS::IAM::Role"
    Properties:
      RoleName: StateMachineRole
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - states.amazonaws.com
            Action: "sts:AssumeRole"
      Path: /
      ManagedPolicyArns:
        - !Ref StateMachinePolicy

  ###########
  # Creates the StateMachineRoleDefaultPolicy managed policy.
  ###########

  StateMachinePolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      Description: Managed policy for the StateMachineRole.
      ManagedPolicyName: stateMachineRolePolicy
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Sid: RekognitionLambdaPermissions
            Effect: Allow
            Action:
              - "lambda:InvokeFunction"
            Resource: !Sub "arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:MyappCdkStack-rekognitionFunction*"
            #Resource: '*'
          - Sid: HumanLambdaPermissions
            Effect: Allow
            Action:
              - "lambda:InvokeFunction"
            Resource: !Sub "arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:MyappCdkStack-humanFunction*"
            #Resource: '*'
          - Sid: StateMachinePermissions
            Effect: Allow
            Action:
              - "states:CreateStateMachine"
              - "states:TagResource"
              - "states:GetExecutionHistory"
              - "states:GetActivityTask"
              - "states:DeleteStateMachine"
              - "states:UpdateStateMachine"
            Resource: "*"

  ###########
  # Creates the MyappCdkStack-BucketNotificationsHandler role.
  # Has the AWSLambdaBasicExecutionRole attached to it.
  # Has the BucketNotificationsHandler managed policy attached to it.
  ###########

  BucketNotificationHandler:
    Type: "AWS::IAM::Role"
    Properties:
      RoleName: BucketNotificationsHandler
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action: "sts:AssumeRole"
      Path: /
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
        - !Ref BucketNotificationPolicy

  ###########
  # Creates the BucketNotificationsHandler managed policy.
  ###########

  BucketNotificationPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      Description: Managed policy for the BucketNotificationHandler role.
      ManagedPolicyName: BucketNotificationHandlerPolicy
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Sid: rekognitionPermissions
            Effect: Allow
            Action:
              - "s3:PutBucketNotification"
              - "sns:Publish"
              - "iam:GetRole"
            Resource: "*"

  ###########
  # Creates a permissions boundary policy that limits the permissions used in the
  # inline policy for the role created by the awsstudent user.
  # This is a free-standing policy.
  # Do not attach the permissions boundary directly to the awsstudent account.
  # This code is good.
  ###########

  BoundaryIAMPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      ManagedPolicyName: boundaryMyappRoleRestrictions
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Sid: cloudwatchPermissions
            Effect: Allow
            Resource: "*"
            Action:
              - "logs:CreateLogStream"
              - "logs:CreateLogGroup"
              - "logs:PutLogEvents"
              - "logs:DescribeLogStream"
              - "logs:CreateLogGroup"
              - "logs:DescribeLogStreams"
              - "logs:GetLogEvents"
          - Sid: s3Permissions
            Effect: Allow
            Resource: "*"
            Action:
              - "s3:PutBucketNotification"

  LabVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsHostnames: true
      EnableDnsSupport: true
      Tags:
        - Key: Name
          Value: Lab VPC

  InternetGateway:
    Type: AWS::EC2::InternetGateway

  AttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref LabVPC
      InternetGatewayId: !Ref InternetGateway

  PublicSubnet:
    Type: AWS::EC2::Subnet
    DependsOn: AttachGateway
    Properties:
      VpcId: !Ref LabVPC
      CidrBlock: 10.0.1.0/24
      MapPublicIpOnLaunch: true
      AvailabilityZone: !Select
        - 0
        - !GetAZs
      Tags:
        - Key: Name
          Value: Public Subnet

  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    DependsOn: PublicSubnet
    Properties:
      VpcId: !Ref LabVPC
      Tags:
        - Key: Name
          Value: Public Route Table

  PublicRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  PublicSubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    DependsOn: PublicRoute
    Properties:
      SubnetId: !Ref PublicSubnet
      RouteTableId: !Ref PublicRouteTable

  SNSTopic:
    Type: AWS::SNS::Topic
    Properties:
      DisplayName: "send-email"
      TopicName: "send-email"

  ###########
  # Creates the role and permissions for use by the Cloud9 instance for bootstrapping.
  ###########
  Cloud9ManagedRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: Cloud9ManagedRole
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Action:
              - sts:AssumeRole
            Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/ReadOnlyAccess
        - arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore
      Policies:
        - PolicyName: Toolkit-Access
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Action:
                  - iam:AttachRolePolicy
                Effect: Allow
                Resource: arn:aws:iam::*:role/notes-application-role
              - Sid: Cloud9Permissions
                Effect: Allow
                Action:
                  - "cloud9:CreateEnvironmentEC2"
                  - "cloud9:ValidateEnvironmentName"
                  - "cloud9:UpdateUserSettings"
                  - "cloud9:UpdateEnvironment"
                Resource: "*"
              - Sid: SnsPermissions
                Effect: Allow
                Action:
                  - "sns:CreateTopic"
                  - "sns:Subscribe"
                Resource: "*"
              - Sid: Cloud9Updates
                Effect: Allow
                Action:
                  - "cloud9:UpdateMembershipSettings"
                  - "cloud9:UpdateEnvironmentSettings"
                Resource: "arn:aws:cloud9:*:*:environment:CDK-Lab"
              - Sid: AssumeCDKRoles
                Effect: Allow
                Action:
                  - "iam:PassRole"
                  - "sts:AssumeRole"
                Resource:
                  - "arn:aws:iam::*:role/CDK-LabStack-File-Publishing-Role"
                  - "arn:aws:iam::*:role/CDK-LabStack-Image-Publishing-Role"
                  - "arn:aws:iam::*:role/CDK-LabStack-Lookup-Role"
                  - "arn:aws:iam::*:role/CDK-LabStack-Deploy-Role"
                  - "arn:aws:iam::*:role/CDK-LabStack-CFN-Execution-Role"
              - Sid: ApplicationPassRolePermissions
                Effect: Allow
                Action:
                  - "iam:PassRole"
                Resource:
                  - "arn:aws:iam::*:role/ViewHitCounterRenderedServiceRole"
                  - "arn:aws:iam::*:role/HelloHitCounterServiceRole"
                  - "arn:aws:iam::*:role/CDKPrimerHelloHandlerLambdaRole"
                  - "arn:aws:iam::*:role/cfn-exec-role*"
              - Sid: Cloud9DenyPermissions
                Effect: Deny
                Action: "cloud9:CreateEnvironmentEC2"
                Resource: "arn:*:cloud9:*:*:environment:*"
                Condition:
                  StringNotEquals:
                    "cloud9:InstanceType": t3.micro
              - Sid: CloudFormationPermissions
                Effect: Allow
                Action:
                  - "cloudformation:CreateChangeSet"
                  - "cloudformation:CreateStack"
                  - "cloudformation:ExecuteChangeSet"
                  - "cloudformation:DeleteStack"
                  - "cloudformation:DeleteChangeSet"
                  - "cloudformation:DescribeStacks"
                Resource: "*"
              - Sid: DynamoDBPermissions
                Effect: Allow
                Action:
                  - "dynamodb:CreateTable"
                  - "dynamodb:BatchGetItem"
                  - "dynamodb:GetRecords"
                  - "dynamodb:GetShardIterator"
                  - "dynamodb:Query"
                  - "dynamodb:GetItem"
                  - "dynamodb:Scan"
                  - "dynamodb:BatchWriteItem"
                  - "dynamodb:PutItem"
                  - "dynamodb:UpdateItem"
                  - "dynamodb:DeleteItem"
                Resource: "*"
              - Sid: S3Permissions
                Effect: Allow
                Action:
                  - "s3:CreateBucket"
                  - "s3:PutEncryptionConfiguration"
                  - "s3:PutBucketPublicAccessBlock"
                  - "s3:putBucketOwnershipControls"
                  - "s3:DeleteBucket"
                  - "s3:PutObject"
                  - "s3:PutBucketPolicy"
                  - "s3:ListBucket"
                Resource: "*"
              - Sid: LambdaPermissions
                Effect: Allow
                Action:
                  - "lambda:CreateFunction"
                  - "lambda:AddPermission"
                  - "lambda:InvokeFunction"
                  - "lambda:DeleteFunction"
                  - "lambda:RemovePermission"
                  - "lambda:UpdateFunctionConfiguration"
                  - "lambda:UpdateFunctionCode"
                Resource: "*"
              - Sid: SSMPermissions
                Action:
                  - "ssm:PutParameter"
                  - "ssm:DeleteParameter"
                  - "ssm:GetConnectionStatus"
                Resource: "*"
                Effect: Allow
              - Sid: StatesPermissions
                Effect: Allow
                Action:
                  - "states:CreateStateMachine"
                  - "states:TagResource"
                  - "states:GetExecutionHistory"
                  - "states:GetActivityTask"
                  - "states:DeleteStateMachine"
                  - "states:UpdateStateMachine"
                Resource: "*"
              - Sid: ApiGatewayPermissions
                Effect: Allow
                Action:
                  - "apigateway:PUT"
                  - "apigateway:DELETE"
                  - "apigateway:PATCH"
                  - "apigateway:POST"
                  - "apigateway:SetWebACL"
                Resource: "*"
              - Sid: EcrPermissions
                Effect: Allow
                Action:
                  - "ecr:CreateRepository"
                Resource: "*"
              - Sid: 1ServiceLinkedRole
                Effect: Allow
                Action: "iam:CreateServiceLinkedRole"
                Resource: "arn:aws:iam::*:role/aws-service-role/*"
              - Sid: 2stsDecode
                Action:
                  - "sts:DecodeAuthorizationMessage"
                Resource: "*"
                Effect: Allow
              - Sid: 3DenyLoadBalancingByVolumeSize
                Effect: Deny
                Action: "ec2:RunInstances"
                Resource:
                  - "arn:aws:ec2:*:*:volume/*"
                  - "arn:aws:elasticloadbalancing:*:*:loadbalancer/*/*/*"
                Condition:
                  NumericGreaterThan:
                    "ec2:VolumeSize": "100"
              - Sid: 4DenyEC2ByVolumeSize
                Effect: Deny
                Action: "ec2:CreateVolume"
                Resource: "*"
                Condition:
                  NumericGreaterThan:
                    "ec2:VolumeSize": "100"
              - Sid: 5RestrictInstanceTypes
                Effect: Deny
                Action:
                  - "ec2:StartInstances"
                  - "ec2:RunInstances"
                Resource: "arn:aws:ec2:*:*:instance/*"
                Condition:
                  StringNotEquals:
                    "ec2:InstanceType":
                      - t3.nano
                      - t3.micro
                      - t3.small
                      - t3.medium
              - Sid: 6DenyPaidAMIs
                Effect: Deny
                Action: "ec2:RunInstances"
                Resource: "arn:aws:ec2:*::image/ami-*"
                Condition:
                  "ForAnyValue:StringEqualsIgnoreCase":
                    "ec2:ResourceTag/AMI-TYPE": Paid
              - Sid: 7DenySpotInstances
                Effect: Deny
                Action: "ec2:*Spot*"
                Resource: "*"
              - Sid: 8DenyListLabPolicies
                Effect: Deny
                Action:
                  - "iam:Get*"
                  - "iam:List*"
                Resource:
                  - "arn:aws:iam::*:policy/lab_policy"
                  - "arn:aws:iam::*:policy/default_policy"
                  - "arn:aws:iam::*:policy/default_QL_policy"
                  - "arn:aws:iam::*:policy/CDKPrimerLabIAMStudentRestrictions"
                  - "arn:aws:iam::*:user/awsstudent"
              - Sid: 9DenyViewingQLStacks
                Effect: Deny
                Action:
                  - "cloudformation:List*"
                  - "cloudformation:Describe*"
                  - "cloudformation:Get*"
                  - "cloudformation:Set*"
                Resource: "arn:aws:cloudformation:*:*:stack/qls*/*"
              - Sid: 10DenyNonAmazonAmis
                Effect: Deny
                Action: "ec2:RunInstances"
                Resource: "arn:aws:ec2:*:*:image/*"
                Condition:
                  StringNotEqualsIgnoreCase:
                    "ec2:Owner": amazon
              - Sid: 11DenyLargeCreate
                Effect: Deny
                Action: "rds:CreateDBInstance"
                Resource: "*"
                Condition:
                  StringNotEquals:
                    "rds:DatabaseClass":
                      - db.t3.micro
                      - db.t3.small
                      - db.t3.medium

  # Lambda Processing Role for Cloud9 bootstrapping
  LambdaProcessingRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: /
      Policies:
        - PolicyName: !Sub lambdaLogsCreatePolicy-${AWS::StackName}
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:DescribeLogStream
                  - logs:CreateLogGroup
                  - logs:DescribeLogStreams
                  - logs:GetLogEvents
                Resource: !Sub arn:aws:logs:${AWS::Region}:${AWS::AccountId}:*
        - PolicyName: !Sub lambdaLogPolicy-${AWS::StackName}
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                  - logs:DescribeLogStream
                  - logs:CreateLogGroup
                  - logs:DescribeLogStreams
                  - logs:GetLogEvents
                Resource:
                  - !Sub arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/*:*
        - PolicyName: !Sub lambdaAttachIAMtoEC2Policy-${AWS::StackName}
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - "iam:CreateInstanceProfile"
                  - "iam:CreateRole"
                  - "iam:ListInstanceProfiles"
                  - "iam:ListAttachedRolePolicies"
                  - "iam:GetInstanceProfile"
                  - "ec2:DescribeIamInstanceProfileAssociations"
                  - "ec2:AssociateIamInstanceProfile"
                  - "ec2:DisassociateIamInstanceProfile"
                  - "ec2:DescribeTags"
                  - "ec2:DescribeInstances"
                  - "ec2:DescribeInstanceAttribute"
                  - "ec2:CreateTags"
                Resource: "*"
              - Effect: Allow
                Action: "iam:AttachRolePolicy"
                Resource: !Sub "arn:aws:iam::${AWS::AccountId}:role/*"
                Condition:
                  ArnLike:
                    "iam:PolicyARN": !GetAtt Cloud9ManagedRole.Arn
              - Effect: Allow
                Action: "iam:PassRole"
                Resource: !GetAtt Cloud9ManagedRole.Arn
                Condition:
                  StringEquals:
                    "iam:PassedToService": ec2.amazonaws.com
              - Effect: Allow
                Action: "iam:AddRoleToInstanceProfile"
                Resource:
                  - !Sub "arn:aws:iam::${AWS::AccountId}:instance-profile/*"
                  - !GetAtt Cloud9ManagedRole.Arn

  ### --- Start of Cloud9 Section --- ###

  # --- The Cloud9 environment for the lab. --- #
  Cloud9:
    Type: AWS::Cloud9::EnvironmentEC2
    DependsOn:
      - PublicSubnetRouteTableAssociation
      - CreateSLRs
    Properties:
      Name: Cloud9-Lab-IDE
      ImageId: !Ref Cloud9ImageId
      InstanceType: !Ref Cloud9InstanceType
      SubnetId: !Ref PublicSubnet
      OwnerArn:
        Fn::Sub: arn:${AWS::Partition}:sts::${AWS::AccountId}:assumed-role/${LabUserRoleName}/${LabPoolId}
      AutomaticStopTimeMinutes: !Ref Cloud9AutomaticStopTimeMinutes

  # --- The IAM managed policy that provides access to the AWS resources required by the Cloud9 EC2 instance during bootstrapping. --- #
  Cloud9InstancePolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      Description: Provides access to the AWS resources required by the Cloud9 EC2 instance during bootstrapping.
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Sid: RegionPinning
            NotAction:
              - cloudfront:*
              - health:*
              - iam:*
              - route53:*
              - sts:*
              - waf:*
            Effect: Deny
            Resource: "*"
            Condition:
              ForAnyValue:StringNotEquals:
                aws:RequestedRegion:
                  - !Ref AWS::Region

  # --- The IAM role that is meant to be assumed by the Cloud9 EC2 instance while the SSM Automation is running the 'GrowPartitionAndBootstrap' step. --- #
  Cloud9InstanceRole:
    Type: AWS::IAM::Role
    Properties:
      Description: Meant to be assumed by the Cloud9 EC2 instance while the SSM Automation is running the 'GrowPartitionAndBootstrap' step.
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Action:
              - sts:AssumeRole
            Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore
        - arn:aws:iam::aws:policy/ReadOnlyAccess
        - !Ref Cloud9InstancePolicy

  # --- The IAM instance profile to be associated with the Cloud9 EC2 instance during bootstrapping.  --- #
  Cloud9InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Roles:
        - !Ref Cloud9InstanceRole

  Cloud9InstanceProfile2:
    Type: AWS::IAM::InstanceProfile
    Properties:
      InstanceProfileName: Cloud9ManagedRole
      Roles:
        - !Ref Cloud9ManagedRole

  # --- The IAM managed policy that provides access to the AWS resources required by the SSM Automation for Cloud9. --- #
  Cloud9AutomationPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      Description: Provides access to the AWS resources required by the SSM Automation for Cloud9.
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Sid: ModifyVolume
            Action:
              - ec2:DescribeVolumes
              - ec2:ModifyVolume
            Effect: Allow
            Resource: "*"
          - Sid: BootstrapProfileManagement
            Action:
              - ec2:AssociateIamInstanceProfile
              - ec2:DisassociateIamInstanceProfile
              - ec2:DescribeIamInstanceProfileAssociations
              - ec2:DescribeInstanceStatus
              - ec2:RebootInstances
            Effect: Allow
            Resource: "*"
          - Sid: BootstrapPassRole
            Action:
              - iam:PassRole
            Effect: Allow
            Resource:
              - !GetAtt Cloud9InstanceRole.Arn
              - !GetAtt Cloud9ManagedRole.Arn
            Condition:
              StringEquals:
                iam:PassedToService: ec2.amazonaws.com
          - Sid: BootstrapCleanup
            Action:
              - iam:DeletePolicy
              - iam:DeleteRole
              - iam:DetachRolePolicy
              - iam:RemoveRoleFromInstanceProfile
            Effect: Allow
            Resource:
              - !Ref Cloud9InstancePolicy
              - !GetAtt Cloud9InstanceProfile.Arn
              - !GetAtt Cloud9InstanceRole.Arn
              - !Sub arn:aws:iam::${AWS::AccountId}:policy/*-Cloud9AutomationPolicy-*
              - !Sub arn:aws:iam::${AWS::AccountId}:role/*-Cloud9AutomationRole-*
          - Sid: RegionPinning
            NotAction:
              - cloudfront:*
              - health:*
              - iam:*
              - route53:*
              - sts:*
              - waf:*
            Effect: Deny
            Resource: "*"
            Condition:
              ForAnyValue:StringNotEquals:
                aws:RequestedRegion:
                  - !Ref AWS::Region

  # --- The IAM role that is meant to be assumed by the SSM Automation for Cloud9. --- #
  Cloud9AutomationRole:
    Type: AWS::IAM::Role
    Properties:
      Description: Meant to be assumed by the SSM Automation for Cloud9.
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Action:
              - sts:AssumeRole
            Effect: Allow
            Principal:
              Service: ssm.amazonaws.com
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonSSMAutomationRole
        - !Ref Cloud9AutomationPolicy

  # --- The SSM Automation document containing the steps to bootstrap the Cloud9 EC2 instance. --- #
  # The steps in this document resize the Cloud9 volume and grow the volume partition.
  # Additional commands can be added to 'GrowPartitionAndBootstrap' step, which will then be run on the Cloud9 Instance.
  Cloud9Automation:
    DependsOn: Cloud9
    Type: AWS::SSM::Document
    Properties:
      Name: Cloud9Automation
      TargetType: /AWS::EC2::Instance
      DocumentType: Automation
      Content:
        description: |-
          This automation resizes a Cloud9 volume, and runs additional bootstrapping commands.
        schemaVersion: "0.3"
        assumeRole: !GetAtt Cloud9AutomationRole.Arn
        parameters:
          InstanceId:
            type: String
            description: (Required) The identifier of the instance.
          SizeGBAsInteger:
            type: Integer
            description: (Required) The the new size for the volume. (Integer Type)
            default: !Ref Cloud9VolumeSize
          SizeGBAsString:
            type: String
            description: (Required) The the new size for the volume. (String Type)
            default: !Sub ${Cloud9VolumeSize}
          DeviceName:
            type: String
            description: (Required) The device name (such as /dev/xvda) to be resized.
            allowedPattern: ^[/a-zA-Z0-9]{1,40}$
            default: /dev/xvda
          PartitionNum:
            type: String
            description: (Required) The partition number of the device to resize.
            default: "1"
        mainSteps:
          # --- 1. Associates the Cloud9 instance profile with the Cloud9 instance. This is required to run the commands in the step 'GrowPartitionAndBootstrap' below. --- #
          - name: AssociateIamInstanceProfile
            action: aws:executeAwsApi
            onFailure: Abort
            inputs:
              Service: ec2
              Api: AssociateIamInstanceProfile
              InstanceId: "{{ InstanceId }}"
              IamInstanceProfile:
                Name: !Ref Cloud9InstanceProfile
            outputs:
              - Name: AssociationId
                Selector: $.IamInstanceProfileAssociation.AssociationId
                Type: String
              - Name: VolumeId
                Selector: $.Volumes[0].VolumeId
                Type: String

          # --- 2. Identifies the VolumeId and the Current Size (in GB) of the volume. These variables are used in the steps below. --- #
          - name: GetVolumeData
            action: aws:executeAwsApi
            onFailure: Abort
            inputs:
              Service: ec2
              Api: DescribeVolumes
              Filters:
                - Name: attachment.device
                  Values:
                    - "{{ DeviceName }}"
                - Name: attachment.instance-id
                  Values:
                    - "{{ InstanceId }}"
            outputs:
              - Name: VolumeId
                Selector: $.Volumes[0].VolumeId
                Type: String
              - Name: CurrentSizeGiB
                Selector: $.Volumes[0].Size
                Type: Integer

          # --- 3. Modifies the size of your Cloud9 volume. --- #
          - name: ModifyVolume
            action: aws:executeAwsApi
            onFailure: Abort
            inputs:
              Service: ec2
              Api: ModifyVolume
              VolumeId: "{{ GetVolumeData.VolumeId }}"
              Size: "{{ SizeGBAsInteger }}"

          # --- 4. Waits for the Cloud9 volume to be resized. --- #
          - name: WaitForVolumeResize
            action: aws:waitForAwsResourceProperty
            inputs:
              Service: ec2
              Api: DescribeVolumes
              VolumeIds:
                - "{{ GetVolumeData.VolumeId }}"
              PropertySelector: "$.Volumes[0].Size"
              DesiredValues:
                - "{{ SizeGBAsString }}"

          # --- 5. Waits for the instance profile to be associated. --- #
          - name: WaitForInstanceProfile
            action: aws:waitForAwsResourceProperty
            inputs:
              Service: ec2
              Api: DescribeIamInstanceProfileAssociations
              AssociationIds:
                - "{{ AssociateIamInstanceProfile.AssociationId }}"
              PropertySelector: "$.IamInstanceProfileAssociations[0].State"
              DesiredValues:
                - "associated"

          # --- 6. Reboots the Cloud9 instance to speed up the SSM agent availability. --- #
          - name: RebootInstance
            action: aws:executeAwsApi
            onFailure: Abort
            inputs:
              Service: ec2
              Api: RebootInstances
              InstanceIds:
                - "{{ InstanceId }}"

          # --- 7. Wait for the Cloud9 instance to be reachable again. --- #
          - name: WaitForInstance
            action: aws:waitForAwsResourceProperty
            inputs:
              Service: ec2
              Api: DescribeInstanceStatus
              InstanceIds:
                - "{{ InstanceId }}"
              PropertySelector: "$.InstanceStatuses[0].InstanceStatus.Details[0].Status"
              DesiredValues:
                - "passed"

          # --- 8. Grows the Cloud9 partition, and also allows for additional Cloud9 bootstrap commands. --- #
          - name: GrowPartitionAndBootstrap
            action: aws:runCommand
            onFailure: Abort
            inputs:
              DocumentName: AWS-RunShellScript
              InstanceIds:
                - "{{ InstanceId }}"
              Parameters:
                commands:
                  # --- Commands required to grow the Cloud9 partition --- #
                  - sudo growpart '{{ DeviceName }}' '{{ PartitionNum }}'
                  - sudo xfs_growfs -d /
                  # --- PUT ANY ADDITIONAL CLOUD9 BOOTSTRAP COMMANDS BELOW HERE. --- #

          - name: uninstallAWSCLIV1
            action: aws:runCommand
            onFailure: Abort
            inputs:
              DocumentName: AWS-RunShellScript
              InstanceIds:
                - "{{ InstanceId }}"
              Parameters:
                commands:
                  - echo "Removing /usr/local/aws."
                  - rm -rf /usr/local/aws
                  - echo "Removing /usr/local/bin/aws."
                  - rm /usr/local/bin/aws
                  - echo "Removed AWS CLI V1."

          - name: installAWSCLIV2
            action: aws:runCommand
            onFailure: Abort
            inputs:
              DocumentName: AWS-RunShellScript
              InstanceIds:
                - "{{ InstanceId }}"
              Parameters:
                commands:
                  - echo "Downloading AWS CLI V2."
                  - curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
                  - echo "Unzipping awscliv2.zip."
                  - unzip awscliv2.zip
                  - echo "Installing AWS CLI V2."
                  - ./aws/install
                  - echo "Cleaning up AWS CLI V2 installation files."
                  - rm awscliv2.zip
                  - echo "AWS CLI V2 successfully installed."

          - name: installCDKv2281
            action: aws:runCommand
            onFailure: Abort
            inputs:
              DocumentName: AWS-RunShellScript
              InstanceIds:
                - "{{ InstanceId }}"
              Parameters:
                commands:
                  - su - ec2-user -c 'npm install -g aws-cdk@2 --force'
                  - su - ec2-user -c 'npm install'

          - name: installTypeScript
            action: aws:runCommand
            onFailure: Abort
            inputs:
              DocumentName: AWS-RunShellScript
              InstanceIds:
                - "{{ InstanceId }}"
              Parameters:
                commands:
                  - su - ec2-user -c 'npm install -g typescript'

          - name: installJQuery
            action: aws:runCommand
            onFailure: Abort
            inputs:
              DocumentName: AWS-RunShellScript
              InstanceIds:
                - "{{ InstanceId }}"
              Parameters:
                commands:
                  - yum install jq -y

          - name: createEmptyCDKProject
            action: aws:runCommand
            onFailure: Abort
            inputs:
              DocumentName: AWS-RunShellScript
              InstanceIds:
                - "{{ InstanceId }}"
              Parameters:
                commands:
                  - su - ec2-user -c 'mkdir /home/ec2-user/environment/myapp-cdk && cd /home/ec2-user/environment/myapp-cdk && cdk init -l typescript'

          - name: updatePackageJson
            action: aws:runCommand
            onFailure: Abort
            inputs:
              DocumentName: AWS-RunShellScript
              InstanceIds:
                - "{{ InstanceId }}"
              Parameters:
                commands:
                  - echo 'Downloading modify-package-dot-json.sh.'
                  - curl https://aws-tc-largeobjects.s3.us-west-2.amazonaws.com/ILT-DD-300-ADVDEV/CDK-lab-3/modify-package-dot-json.sh -o /home/ec2-user/environment/modify-package-dot-json.sh
                  - echo 'Download complete.'
                  - echo 'Making file executable.'
                  - chmod +x /home/ec2-user/environment/modify-package-dot-json.sh
                  - echo 'File can now be ran as a bash script.'
                  - echo 'Executing modify-package-dot-json.sh'
                  - bash /home/ec2-user/environment/modify-package-dot-json.sh
                  - echo 'Execution of modify-package-dot-json.sh is now complete.'
                  - rm -rf /home/ec2-user/environment/modify-package-dot-json.sh
                  - echo 'Setting file ownership to ec2-user.'
                  - chown ec2-user:ec2-user /home/ec2-user/environment/myapp-cdk/package.json
                  - echo 'Ownership changed for the package.json file.'

          - name: replaceMyappCDKFile
            action: aws:runCommand
            onFailure: Abort
            inputs:
              DocumentName: AWS-RunShellScript
              InstanceIds:
                - "{{ InstanceId }}"
              Parameters:
                commands:
                  - echo 'Downloading myapp-cdk.ts.'
                  - curl https://aws-tc-largeobjects.s3.us-west-2.amazonaws.com/ILT-DD-300-ADVDEV/CDK-lab-3/myapp-cdk.ts -o /home/ec2-user/environment/myapp-cdk/bin/myapp-cdk.ts
                  - echo 'Download complete.'
                  - echo 'Setting file ownership to ec2-user.'
                  - chown ec2-user:ec2-user /home/ec2-user/environment/myapp-cdk/bin/myapp-cdk.ts
                  - echo 'Ownership changed for the myapp-cdk.ts file.'

          - name: downloadCustomizedBootstrapTemplate
            action: aws:runCommand
            onFailure: Abort
            inputs:
              DocumentName: AWS-RunShellScript
              InstanceIds:
                - "{{ InstanceId }}"
              Parameters:
                commands:
                  - echo 'Downloading customized-bootstrap-template.yaml.'
                  - curl https://aws-tc-largeobjects.s3.us-west-2.amazonaws.com/ILT-DD-300-ADVDEV/CDK-lab-3/customized-bootstrap-template.yaml -o /home/ec2-user/environment/myapp-cdk/customized-bootstrap-template.yaml
                  - echo 'Download completed successfully.'
                  - echo 'Setting file ownership to ec2-user.'
                  - chown ec2-user:ec2-user /home/ec2-user/environment/myapp-cdk/customized-bootstrap-template.yaml
                  - echo 'Ownership changed for the customized-bootstrap-template.yaml file.'

          - name: labIsReady
            action: aws:runCommand
            onFailure: Abort
            inputs:
              DocumentName: AWS-RunShellScript
              InstanceIds:
                - "{{ InstanceId }}"
              Parameters:
                commands:
                  - su - ec2-user -c 'mkdir /home/ec2-user/environment/Lab-Is-Ready'
                  - su - ec2-user -c 'rm -rf /home/ec2-user/environment/README.md'

          # --- 9. Disassociates the Cloud9 instance profile from the Cloud9 instance for security reasons. --- #
          - name: DisassociateIamInstanceProfile
            action: aws:executeAwsApi
            onFailure: Abort
            inputs:
              Service: ec2
              Api: disassociate_iam_instance_profile
              AssociationId: "{{ AssociateIamInstanceProfile.AssociationId }}"

          # --- 10. Removes the Cloud9 instance's role from the Cloud9 instance profile for security reasons. --- #
          - name: RemoveCloud9InstanceRoleFromInstanceProfile
            action: aws:executeAwsApi
            onFailure: Abort
            inputs:
              Service: iam
              Api: RemoveRoleFromInstanceProfile
              InstanceProfileName: !Ref Cloud9InstanceProfile
              RoleName: !Ref Cloud9InstanceRole

          # --- 11. Detaches the 'AmazonSSMManagedInstanceCore' policy from the Cloud9 instance's role for security reasons. --- #
          - name: DetachAmazonSSMManagedInstanceCorePolicy
            action: aws:executeAwsApi
            onFailure: Abort
            inputs:
              Service: iam
              Api: DetachRolePolicy
              PolicyArn: arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore
              RoleName: !Ref Cloud9InstanceRole

          # --- 12. Detaches the 'ReadOnlyAccess' policy from the Cloud9 instance's role for security reasons. --- #
          - name: DetachReadOnlyAccessPolicy
            action: aws:executeAwsApi
            onFailure: Abort
            inputs:
              Service: iam
              Api: DetachRolePolicy
              PolicyArn: arn:aws:iam::aws:policy/ReadOnlyAccess
              RoleName: !Ref Cloud9InstanceRole

          # --- 13. Detaches the Cloud9 instance's policy from the Cloud9 instance's role for security reasons. --- #
          - name: DetachCloud9InstancePolicy
            action: aws:executeAwsApi
            onFailure: Abort
            inputs:
              Service: iam
              Api: DetachRolePolicy
              PolicyArn: !Ref Cloud9InstancePolicy
              RoleName: !Ref Cloud9InstanceRole

          # --- 14. Deletes the Cloud9 instance's policy for security reasons. --- #
          - name: DeleteCloud9InstancePolicy
            action: aws:executeAwsApi
            onFailure: Abort
            inputs:
              Service: iam
              Api: DeletePolicy
              PolicyArn: !Ref Cloud9InstancePolicy

          # --- 15. Deletes the Cloud9 instance's role for security reasons. --- #
          - name: DeleteCloud9InstanceRole
            action: aws:executeAwsApi
            onFailure: Abort
            inputs:
              Service: iam
              Api: DeleteRole
              RoleName: !Ref Cloud9InstanceRole

          # --- 20. Associates the Cloud9 instance profile with the Cloud9 instance. This is required to run the commands in the step 'GrowPartitionAndBootstrap' below. --- #
          - name: AssociateIamInstanceProfile2
            action: aws:executeAwsApi
            onFailure: Abort
            inputs:
              Service: ec2
              Api: AssociateIamInstanceProfile
              InstanceId: "{{ InstanceId }}"
              IamInstanceProfile:
                Name: !Ref Cloud9InstanceProfile2

          # --- 16. Detaches the 'AmazonSSMAutomationRole' policy from the Cloud9 automation's role for security reasons. --- #
          - name: DetachAmazonSSMAutomationRolePolicy
            action: aws:executeAwsApi
            onFailure: Abort
            inputs:
              Service: iam
              Api: DetachRolePolicy
              PolicyArn: arn:aws:iam::aws:policy/service-role/AmazonSSMAutomationRole
              RoleName: !Ref Cloud9AutomationRole

          # --- 17. Detaches the Cloud9 automation's policy from the Cloud9 automation's role for security reasons. --- #
          - name: DetachCloud9AutomationPolicy
            action: aws:executeAwsApi
            onFailure: Abort
            inputs:
              Service: iam
              Api: DetachRolePolicy
              PolicyArn: !Ref Cloud9AutomationPolicy
              RoleName: !Ref Cloud9AutomationRole

          # --- 18. Deletes the Cloud9 automation's policy for security reasons.  --- #
          - name: DeleteCloud9AutomationPolicy
            action: aws:executeAwsApi
            onFailure: Abort
            inputs:
              Service: iam
              Api: DeletePolicy
              PolicyArn: !Ref Cloud9AutomationPolicy

          # --- 19. Deletes the Cloud9 automation's role for security reasons.  --- #
          - name: DeleteCloud9AutomationRole
            action: aws:executeAwsApi
            onFailure: Abort
            inputs:
              Service: iam
              Api: DeleteRole
              RoleName: !Ref Cloud9AutomationRole

  # --- The SSM association which will run the bootstrap automation against the Cloud9 instance. --- #
  Cloud9Association:
    Type: AWS::SSM::Association
    Properties:
      AssociationName: Cloud9Association
      Name: !Ref Cloud9Automation
      AutomationTargetParameterName: InstanceId
      Targets:
        - Key: tag:aws:cloud9:environment
          Values:
            - !Ref Cloud9
      WaitForSuccessTimeoutSeconds: 360

  ### --- End of Cloud9 Section --- ###

  CreateSLRs:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: !Sub https://${AWS::Region}-tcprod.s3.amazonaws.com/courses/aws-tc-lab-common-resources/lambda-functions/createslr/yml/create-slr.yml
      Parameters:
        ServiceRole: ssm.amazonaws.com:AWSServiceRoleForAmazonSSM

  ###########
  # Creates the FilePublishingRole for bootstrapping CDK
  ###########
  FilePublishingRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              AWS:
                Ref: AWS::AccountId
      RoleName: CDK-LabStack-File-Publishing-Role
      Tags:
        - Key: aws-cdk:bootstrap-role
          Value: file-publishing

  ###########
  # Creates the ImagePublishingRole for bootstrapping CDK
  ###########
  ImagePublishingRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              AWS:
                Ref: AWS::AccountId
      RoleName: CDK-LabStack-Image-Publishing-Role
      Tags:
        - Key: aws-cdk:bootstrap-role
          Value: image-publishing

  ###########
  # Creates the LookupRole for bootstrapping CDK
  ###########
  LookupRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              AWS:
                Ref: AWS::AccountId
      RoleName: CDK-LabStack-Lookup-Role
      ManagedPolicyArns:
        - Fn::Sub: arn:${AWS::Partition}:iam::aws:policy/ReadOnlyAccess
      Policies:
        - PolicyDocument:
            Statement:
              - Sid: DontReadSecrets
                Effect: Deny
                Action:
                  - kms:Decrypt
                Resource: "*"
            Version: "2012-10-17"
          PolicyName: LookupRolePolicy
      Tags:
        - Key: aws-cdk:bootstrap-role
          Value: lookup

  ###########
  # Creates the FilePublishingRoleDefaultPolicy for bootstrapping CDK
  ###########
  FilePublishingRoleDefaultPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyDocument:
        Statement:
          - Action:
              - s3:GetObject*
              - s3:CreateBucket
              - s3:GetBucket*
              - s3:GetEncryptionConfiguration
              - s3:List*
              - s3:ListBucket
              - s3:DeleteObject*
              - s3:PutObject*
              - s3:Abort*
            Resource:
              - Fn::Sub: ${StagingBucket.Arn}
              - Fn::Sub: ${StagingBucket.Arn}/*
            Effect: Allow
          - Action:
              - kms:Decrypt
              - kms:DescribeKey
              - kms:Encrypt
              - kms:ReEncrypt*
              - kms:GenerateDataKey*
            Effect: Allow
            Resource:
              - Fn::Sub: arn:${AWS::Partition}:kms:${AWS::Region}:${AWS::AccountId}:key/${FileAssetsBucketKmsKeyId}
        Version: "2012-10-17"
      Roles:
        - Ref: FilePublishingRole
      PolicyName: CDK-LabStack-File-Publishing-Role-Default-Policy

  ###########
  # Creates the ImagePublishingRoleDefaultPolicy for bootstrapping CDK
  ###########
  ImagePublishingRoleDefaultPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyDocument:
        Statement:
          - Action:
              - ecr:PutImage
              - ecr:InitiateLayerUpload
              - ecr:UploadLayerPart
              - ecr:CompleteLayerUpload
              - ecr:BatchCheckLayerAvailability
              - ecr:DescribeRepositories
              - ecr:DescribeImages
              - ecr:BatchGetImage
              - ecr:GetDownloadUrlForLayer
            Resource:
              Fn::Sub: ${ContainerAssetsRepository.Arn}
            Effect: Allow
          - Action:
              - ecr:GetAuthorizationToken
            Resource: "*"
            Effect: Allow
        Version: "2012-10-17"
      Roles:
        - Ref: ImagePublishingRole
      PolicyName: CDK-LabStack-Image-Publishing-Role-Default-Policy

  ###########
  # Creates the DeploymentActionRole for bootstrapping CDK
  ###########
  DeploymentActionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              AWS:
                Ref: AWS::AccountId
      Policies:
        - PolicyDocument:
            Statement:
              - Sid: CloudFormationPermissions
                Effect: Allow
                Action:
                  - cloudformation:CreateChangeSet
                  - cloudformation:DeleteChangeSet
                  - cloudformation:DescribeChangeSet
                  - cloudformation:DescribeStacks
                  - cloudformation:ExecuteChangeSet
                  - cloudformation:CreateStack
                  - cloudformation:UpdateStack
                  - cloudformation:DeleteStack
                Resource: "*"
              - Sid: PipelineCrossAccountArtifactsBucket
                Effect: Allow
                Action:
                  - s3:CreateBucket
                  - s3:GetObject*
                  - s3:GetBucket*
                  - s3:List*
                  - s3:ListBucket
                  - s3:Abort*
                  - s3:DeleteObject*
                  - s3:PutObject*
                Resource: "*"
                Condition:
                  StringNotEquals:
                    s3:ResourceAccount:
                      Ref: AWS::AccountId
              - Sid: PipelineCrossAccountArtifactsKey
                Effect: Allow
                Action:
                  - kms:Decrypt
                  - kms:DescribeKey
                  - kms:Encrypt
                  - kms:ReEncrypt*
                  - kms:GenerateDataKey*
                Resource: "*"
                Condition:
                  StringEquals:
                    kms:ViaService:
                      Fn::Sub: s3.${AWS::Region}.amazonaws.com
              - Action: iam:PassRole
                Resource:
                  Fn::Sub: ${CloudFormationExecutionRole.Arn}
                Effect: Allow
              - Sid: CliPermissions
                Action:
                  - cloudformation:DescribeStackEvents
                  - cloudformation:GetTemplate
                  - cloudformation:DeleteStack
                  - cloudformation:UpdateTerminationProtection
                  - sts:GetCallerIdentity
                Resource: "*"
                Effect: Allow
              - Sid: CliStagingBucket
                Effect: Allow
                Action:
                  - s3:CreateBucket
                  - s3:GetObject*
                  - s3:GetBucket*
                  - s3:List*
                  - s3:ListBucket
                Resource:
                  - Fn::Sub: ${StagingBucket.Arn}
                  - Fn::Sub: ${StagingBucket.Arn}/*
              - Sid: ReadVersion
                Effect: Allow
                Action:
                  - ssm:GetParameter
                Resource:
                  - Fn::Sub: arn:${AWS::Partition}:ssm:${AWS::Region}:${AWS::AccountId}:parameter*
            Version: "2012-10-17"
          PolicyName: default
      RoleName: CDK-LabStack-Deploy-Role
      Tags:
        - Key: aws-cdk:bootstrap-role
          Value: deploy

  ###########
  # Creates the DeploymentActionRole for bootstrapping CDK
  ###########
  CloudFormationExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action:
              - "sts:AssumeRole"
            Effect: Allow
            Principal:
              Service: cloudformation.amazonaws.com
        Version: "2012-10-17"
      ManagedPolicyArns:
        - Ref: CloudFormationExecutionPolicy
      RoleName: CDK-LabStack-CFN-Execution-Role

  ###########
  # Creates the CFN Execution Policy for bootstrapping CDK
  ###########
  CloudFormationExecutionPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      Description: "Used by CDK to create resources using CFN."
      ManagedPolicyName: CDK-LabStack-CFN-Execution-Policy
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Sid: PassRolePermissions
            Effect: Allow
            Action: "iam:PassRole"
            Resource:
              - "arn:aws:iam::*:role/CDKPrimerHelloHandlerLambdaRole"
              - "arn:aws:iam::*:role/HelloHitCounterServiceRole"
          - Sid: CDKPermissions
            Effect: Allow
            Action:
              - "apigateway:POST"
              - "apigateway:PATCH"
              - "apigateway:PUT"
              - "apigateway:GET"
              - "apigateway:DELETE"
              - "dynamodb:CreateTable"
              - "dynamodb:DeleteTable"
              - "dynamodb:Describe*"
              - "dynamodb:Get*"
              - "dynamodb:List*"
              - "ecr:GetAuthorizationToken"
              - "lambda:AddPermission"
              - "lambda:RemovePermission"
              - "lambda:CreateFunction"
              - "lambda:UpdateFunctionCode"
              - "lambda:InvokeFunction"
              - "lambda:Get*"
              - "lambda:List*"
              - "lambda:DeleteFunction"
              - "ssm:GetParameters"
              - "sns:Subscribe"
              - s3:CreateBucket
              - "s3:Get*"
              - "s3:List*"
              - "s3:ListBucket"
              - "iam:CreateRole"
              - "iam:GetRole"
              - "iam:AttachRolePolicy"
              - "iam:DetachRolePolicy"
              - "iam:PutRolePolicy"
              - "iam:DeleteRolePolicy"
              - "iam:DeleteRole"
              - "iam:PassRole"
              - "states:CreateStateMachine"
              - "states:TagResource"
              - "states:DescribeStateMachine"
              - "states:UpdateStateMachine"
              - "states:DeleteStateMachine"
            Resource: "*"

  ###########
  # Creates the Container Assets Repository for bootstrapping CDK
  ###########
  ContainerAssetsRepository:
    Type: AWS::ECR::Repository
    Properties:
      ImageScanningConfiguration:
        ScanOnPush: true
      RepositoryName: cdk-staging-assets-repository

  ###########
  # Creates the Files Assets Bucket Encryption Key for bootstrapping CDK
  ###########
  FileAssetsBucketEncryptionKey:
    Type: AWS::KMS::Key
    Properties:
      KeyPolicy:
        Statement:
          - Action:
              - kms:Create*
              - kms:Describe*
              - kms:Enable*
              - kms:List*
              - kms:Put*
              - kms:Update*
              - kms:Revoke*
              - kms:Disable*
              - kms:Get*
              - kms:Delete*
              - kms:ScheduleKeyDeletion
              - kms:CancelKeyDeletion
              - kms:GenerateDataKey
            Effect: Allow
            Principal:
              AWS:
                Ref: AWS::AccountId
            Resource: "*"
          - Action:
              - kms:Decrypt
              - kms:DescribeKey
              - kms:Encrypt
              - kms:ReEncrypt*
              - kms:GenerateDataKey*
            Effect: Allow
            Principal:
              AWS: "*"
            Resource: "*"
            Condition:
              StringEquals:
                kms:CallerAccount:
                  Ref: AWS::AccountId
                kms:ViaService:
                  - Fn::Sub: s3.${AWS::Region}.amazonaws.com
          - Action:
              - kms:Decrypt
              - kms:DescribeKey
              - kms:Encrypt
              - kms:ReEncrypt*
              - kms:GenerateDataKey*
            Effect: Allow
            Principal:
              AWS:
                Fn::Sub: ${FilePublishingRole.Arn}
            Resource: "*"

  ###########
  # Creates the StagingBucket for bootstrapping CDK
  ###########
  StagingBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub "cdk-staging-bucket-${AWS::AccountId}-${AWS::Region}"
      AccessControl: Private
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: aws:kms
              KMSMasterKeyID: !Sub ${FileAssetsBucketEncryptionKey.Arn}
      OwnershipControls:
        Rules:
          - ObjectOwnership: BucketOwnerPreferred
      VersioningConfiguration:
        Status: Enabled
    UpdateReplacePolicy: Retain
    DeletionPolicy: Retain

  ###########
  # Creates the StagingBucketPolicy for bootstrapping CDK
  ###########

  StagingBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket:
        Ref: StagingBucket
      PolicyDocument:
        Id: AccessControl
        Version: "2012-10-17"
        Statement:
          - Sid: AllowSSLRequestsOnly
            Action: s3:*
            Effect: Deny
            Resource:
              - Fn::Sub: ${StagingBucket.Arn}
              - Fn::Sub: ${StagingBucket.Arn}/*
            Condition:
              Bool:
                aws:SecureTransport: "false"
            Principal: "*"

Outputs:
  PopulatedBucket:
    Value: !Ref PopulatedBucket
  PermissionsBoundaryARN:
    Value: !Ref BoundaryIAMPolicy
    Description: Permissions Boundary Policy ARN

  SendEmailARN:
    Value: !Ref SNSTopic

  AccountID:
    Value: !Ref AWS::AccountId

  Region:
    Value: !Ref AWS::Region

  BucketName:
    Description: The name of the S3 bucket owned by the CDK toolkit stack
    Value:
      Fn::Sub: ${StagingBucket}

  BucketDomainName:
    Description: The domain name of the S3 bucket owned by the CDK toolkit stack
    Value:
      Fn::Sub: ${StagingBucket.RegionalDomainName}
