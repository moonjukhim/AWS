AWSTemplateFormatVersion: 2010-09-09
Description: "Security Operations on AWS: Lab 5 - Using AWS KMS"
Parameters:
  VPCCIDR:
    Description: CIDR Block for VPC
    Type: String
    Default: 10.0.0.0/16
    AllowedValues:
      - 10.0.0.0/16
  PublicSubnet1Param:
    Description: Public Subnet 1
    Type: String
    Default: 10.0.10.0/24
    AllowedValues:
      - 10.0.10.0/24
  PrivateSubnet1Param:
    Description: Private Subnet 1
    Type: String
    Default: 10.0.20.0/24
    AllowedValues:
      - 10.0.20.0/24
  AWSAmiId:
    Type: "AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>"
    Default: /aws/service/ami-amazon-linux-latest/amzn2-ami-hvm-x86_64-gp2

Resources:
  ## Create a VPC and all resources needed for it to function.
  VPC:
    Type: "AWS::EC2::VPC"
    Properties:
      CidrBlock: !Ref VPCCIDR
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: VPC
          Value: JumpServer-and-CLI
        - Key: Name
          Value: Lab VPC

  InternetGateway:
    Type: "AWS::EC2::InternetGateway"
    DependsOn: VPC

  AttachGateway:
    Type: "AWS::EC2::VPCGatewayAttachment"
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway

  PublicSubnet1:
    Type: "AWS::EC2::Subnet"
    DependsOn: AttachGateway
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Ref PublicSubnet1Param
      AvailabilityZone: !Select
        - "0"
        - !GetAZs ""
      Tags:
        - Key: Name
          Value: Public Subnet 1

  PrivateSubnet1:
    Type: "AWS::EC2::Subnet"
    DependsOn: AttachGateway
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Ref PrivateSubnet1Param
      AvailabilityZone: !Select
        - "0"
        - !GetAZs ""
      Tags:
        - Key: Name
          Value: Private Subnet 1

  PublicRouteTable:
    Type: "AWS::EC2::RouteTable"
    DependsOn: PublicSubnet1
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: Public

  PublicRoute:
    Type: "AWS::EC2::Route"
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  PublicSubnet1RouteTableAssociation:
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    DependsOn: PublicRoute
    Properties:
      SubnetId: !Ref PublicSubnet1
      RouteTableId: !Ref PublicRouteTable

  PrivateRouteTable:
    Type: "AWS::EC2::RouteTable"
    DependsOn: PrivateSubnet1
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: Private

  PrivateSubnet1RouteTableAssociation:
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    DependsOn: PrivateRoute
    Properties:
      SubnetId: !Ref PrivateSubnet1
      RouteTableId: !Ref PrivateRouteTable

  PrivateRoute:
    Type: "AWS::EC2::Route"
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      InstanceId: !Ref AppServer

  WebSecurityGroup:
    Type: "AWS::EC2::SecurityGroup"
    Properties:
      GroupDescription: Enable http access to the web server
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: WebSecurityGroup
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
        - IpProtocol: tcp
          FromPort: 0
          ToPort: 65535
          CidrIp: 0.0.0.0/0
        - IpProtocol: udp
          FromPort: 0
          ToPort: 65535
          CidrIp: 0.0.0.0/0

  ## Create a security group for the application server open to port 22 for ssh
  AppSecurityGroup:
    Type: "AWS::EC2::SecurityGroup"
    Properties:
      GroupDescription: Enable internal access to the application server
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: AppSecurityGroup
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: !Ref PublicSubnet1Param
      SecurityGroupEgress:
        - IpProtocol: tcp
          FromPort: 0
          ToPort: 65535
          CidrIp: 0.0.0.0/0
        - IpProtocol: udp
          FromPort: 0
          ToPort: 65535
          CidrIp: 0.0.0.0/0
  ## Create an EC2 instance to encrypt.
  AppServer:
    Type: "AWS::EC2::Instance"
    Properties:
      ImageId: !Ref AWSAmiId
      InstanceType: t3.micro
      NetworkInterfaces:
        - DeviceIndex: "0"
          AssociatePublicIpAddress: false
          SubnetId: !Ref PrivateSubnet1
          GroupSet:
            - !Ref AppSecurityGroup
      SourceDestCheck: false
      Tags:
        - Key: Name
          Value: AppServer
      UserData:
        Fn::Base64: |
          #!/bin/bash
          yum -y update

  S3ReplicationRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: S3ReplicationRole
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - s3.amazonaws.com
            Action: sts:AssumeRole
      Path: "/"
      Policies:
        - PolicyName: ReplicationPolicy
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  - s3:Get*
                  - s3:ListBucket
                  - s3:GetObjectVersionTagging
                  - s3:ReplicateObject
                  - s3:ReplicateDelete
                  - s3:ReplicateTags
                  - kms:Decrypt
                  - kms:Encrypt
                Resource: '*'

Conditions:
  isUswest: !Equals
    - !Ref AWS::Region
    - us-west-2

Outputs:
  PrimaryRegion:
    Description: Primary Region used in the lab
    Value: !Ref AWS::Region

  SecondaryRegion:
    Description: Secondary region used in the lab
    Value: !If [isUswest, us-west-1, us-west-2]

  S3ReplicationRole:
    Description: The role that will be used for replication
    Value: !Ref S3ReplicationRole
