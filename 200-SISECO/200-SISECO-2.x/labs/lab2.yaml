AWSTemplateFormatVersion: "2010-09-09"
Description: "Security Engineering on AWS - Lab 3"
Parameters:
  KeyName:
    Type: AWS::EC2::KeyPair::KeyName
  S3PathPrefix:
    Type: String
    Description: "The path prefix where lab resources are stored (Leading and trailing slash required!)"
    Default: "courses/ILT-TF-200-SISECO/v2.7.5.prod-4a6f9c09/lab-3-config"
  AWSAmiId:
    Type: "AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>"
    Default: >-
      /aws/service/ami-amazon-linux-latest/amzn2-ami-hvm-x86_64-gp2

Resources:
  #-----Start - Lambda function to generate random number to use with bucket names-----#
  LambdaGeneratorRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: LambdaGeneratorRole
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Policies:
        - PolicyName: allowLambdaLogging
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Action:
                  - "logs:*"
                Resource: "*"

  NumberGeneratorLambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: NumberGenerator
      Code:
        ZipFile: >
          const response = require("cfn-response");

          const generateNumber = (length, chars) => {
            var result = '';
            for (var i = length; i > 0; --i) result += chars[Math.floor(Math.random() * chars.length)];
            return result;
          }

          exports.handler = (event, context) =>{
            const str = generateNumber(event['ResourceProperties']['Length'], '0123456789');
            const responseData = {RandomNumber: str};
            response.send(event, context, response.SUCCESS, responseData);
          };
      Handler: index.handler
      Runtime: nodejs16.x
      Role: !GetAtt LambdaGeneratorRole.Arn
      MemorySize: 128
      Timeout: 20

  GenerateNumber:
    Type: AWS::CloudFormation::CustomResource
    Properties:
      Length: 9
      ServiceToken: !GetAtt NumberGeneratorLambdaFunction.Arn
  #-----End - Lambda function to generate random number to use with bucket names-----#

  CommandHostInstProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: /
      Roles:
        - !Ref CommandHostRole
      InstanceProfileName: CommandHostInstanceProfile

  CommandHostRole:
    Type: AWS::IAM::Role
    Properties:
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore
      AssumeRolePolicyDocument:
        Statement:
          - Effect: "Allow"
            Principal:
              Service: ["ec2.amazonaws.com"]
            Action: ["sts:AssumeRole"]
      Path: "/"
      Policies:
        - PolicyName: CommandHostRole
          PolicyDocument:
            Statement:
              - Effect: "Allow"
                Action:
                  [
                    "cloudwatch:PutMetricData",
                    "config:BatchGetAggregateResourceConfig",
                    "config:BatchGetResourceConfig",
                    "config:DeliverConfigSnapshot",
                    "config:Describe*",
                    "config:Get*",
                    "config:ListAggregateDiscoveredResources",
                    "config:ListDiscoveredResources",
                    "config:ListTagsForResource",
                    "config:PutAggregationAuthorization",
                    "config:PutConfigRule",
                    "config:PutConfigurationAggregator",
                    "config:PutConfigurationRecorder",
                    "config:PutDeliveryChannel",
                    "config:PutEvaluations",
                    "config:SelectResourceConfig",
                    "config:Start*",
                    "config:Stop*",
                    "config:TagResource",
                    "config:UntagResource",
                    "ec2:DescribeInstanceStatus",
                    "ec2messages:AcknowledgeMessage",
                    "ec2messages:DeleteMessage",
                    "ec2messages:FailMessage",
                    "ec2messages:GetEndpoint",
                    "ec2messages:GetMessages",
                    "ec2messages:SendReply",
                    "events:ActivateEventSource",
                    "events:CreateEventBus",
                    "events:Deactivate*",
                    "events:EnableRule",
                    "events:List*",
                    "events:PutEvents",
                    "events:PutPermission",
                    "events:PutRule",
                    "events:PutTargets",
                    "events:RemovePermission",
                    "events:RemoveTargets",
                    "events:TagResource",
                    "events:TestEventPattern",
                    "events:UntagResource",
                    "iam:PassRole",
                    "lambda:AddPermission",
                    "lambda:CreateAlias",
                    "lambda:CreateFunction",
                    "lambda:DeleteAlias",
                    "lambda:DeleteFunction",
                    "lambda:Get*",
                    "lambda:InvokeAsync",
                    "lambda:InvokeFunction",
                    "lambda:List*",
                    "lambda:PublishVersion",
                    "lambda:UpdateAlias",
                    "lambda:UpdateFunctionCode",
                    "lambda:UpdateFunctionConfiguration",
                    "logs:CreateLogGroup",
                    "logs:CreateLogStream",
                    "logs:DescribeLogGroups",
                    "logs:DescribeLogStreams",
                    "logs:PutLogEvents",
                    "sns:Subscribe",
                    "ssm:Desc*",
                    "ssm:ExecuteAutomation",
                    "ssm:Get*",
                    "ssm:List*",
                    "ssm:PutComplianceItems",
                    "ssm:PutConfigurePackageResult",
                    "ssm:PutInventory",
                    "ssm:RunCommand",
                    "ssm:SendCommand",
                    "ssm:StartAutomationExecution",
                    "ssm:UpdateAssociationStatus",
                    "ssm:UpdateInstanceAssociationStatus",
                    "ssm:UpdateInstanceInformation",
                  ]
                Resource: "*"

  ConfigRole:
    Type: "AWS::IAM::Role"
    Properties:
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWS_ConfigRole
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service: "config.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      Policies:
        - PolicyName: "ConfigCustomRule"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Action:
                  [
                    "s3:DeleteObject",
                    "s3:DeleteObjectTagging",
                    "s3:DeleteObjectVersionTagging",
                    "s3:DescribeJob",
                    "s3:Get*",
                    "s3:HeadBucket",
                    "s3:List*",
                    "s3:PutBucketTagging",
                    "s3:PutObject",
                    "s3:PutObjectTagging",
                    "s3:PutObjectVersionTagging",
                    "s3:ReplicateTags",
                    "sns:CheckIfPhoneNumberIsOptedOut",
                    "sns:ConfirmSubscription",
                    "sns:CreateTopic",
                    "sns:DeleteTopic",
                    "sns:Get*",
                    "sns:List*",
                    "sns:Publish",
                    "sns:SetSMSAttributes",
                    "sns:SetSubscriptionAttributes",
                    "sns:SetTopicAttributes",
                    "sns:Subscribe",
                    "sns:Unsubscribe",
                  ]
                Resource: "*"
      RoleName: ConfigRole

  LambdaRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service: "lambda.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      Policies:
        - PolicyName: LambdaRole
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Action:
                  [
                    "sns:Publish",
                    "s3:GetBucketAcl",
                    "s3:PutBucketAcl",
                    "s3:GetBucketPolicy",
                    "s3:DeleteBucketPolicy",
                    "s3:GetBucketTagging",
                    "logs:CreateLogGroup",
                    "logs:CreateLogStream",
                    "logs:PutLogEvents",
                  ]
                Resource: "*"
      RoleName: LambdaRole

  ConfigSNSTopic:
    Type: "AWS::SNS::Topic"
    Properties:
      DisplayName: ConfigSNSTopic

  ConfigBucket:
    Type: "AWS::S3::Bucket"
    Properties:
      AccessControl: LogDeliveryWrite
      OwnershipControls:
        Rules:
          - ObjectOwnership: BucketOwnerPreferred

  ConfigBucketPolicy:
    Type: "AWS::S3::BucketPolicy"
    Properties:
      Bucket: !Ref ConfigBucket
      PolicyDocument:
        Statement:
          - Effect: "Allow"
            Principal:
              Service: "config.amazonaws.com"
            Action:
              - "s3:PutObject"
            Resource: !Sub arn:aws:s3:::${ConfigBucket}/AWSLogs/${AWS::AccountId}/*
          - Effect: "Allow"
            Principal:
              Service: "config.amazonaws.com"
            Action:
              - "s3:GetBucketAcl"
            Resource: !Sub arn:aws:s3:::${ConfigBucket}

  PublicBucket:
    Type: "AWS::S3::Bucket"
    Properties:
      BucketName: !Sub publicbucket-${AWS::Region}-${GenerateNumber.RandomNumber}
      PublicAccessBlockConfiguration:
        BlockPublicAcls: False
        IgnorePublicAcls: False
      Tags:
        - Key: CanBePublic
          Value: "1"

  PublicBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref PublicBucket
      PolicyDocument:
        Statement:
          - Action:
              - s3:GetObject
            Effect: Allow
            Resource: !Sub arn:aws:s3:::${PublicBucket}/*
            Principal: "*"

  PrivateBucket:
    Type: "AWS::S3::Bucket"
    Properties:
      BucketName: !Sub privatebucket-${AWS::Region}-${GenerateNumber.RandomNumber}
      PublicAccessBlockConfiguration:
        BlockPublicAcls: False
        IgnorePublicAcls: False
      Tags:
        - Key: CanBePublic
          Value: "0"

  PrivateBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref PrivateBucket
      PolicyDocument:
        Statement:
          - Action:
              - s3:GetObject
              - s3:PutObject
            Effect: Allow
            Resource: !Sub arn:aws:s3:::${PrivateBucket}/*
            Principal: "*"

  VPC:
    Type: "AWS::EC2::VPC"
    Properties:
      CidrBlock: 10.0.0.0/24
      EnableDnsHostnames: true
      EnableDnsSupport: true
      Tags:
        - Key: Name
          Value:
            Ref: AWS::StackName

  PublicSubnet:
    DependsOn: GatewayAttachment
    Type: "AWS::EC2::Subnet"
    Properties:
      CidrBlock: 10.0.0.0/24
      MapPublicIpOnLaunch: true
      VpcId: { Ref: VPC }
      AvailabilityZone: !Select
        - 0
        - !GetAZs
          Ref: AWS::Region
      Tags:
        - Key: Name
          Value:
            Fn::Join:
              - "-"
              - [{ Ref: "AWS::StackName" }, "a"]

  InternetGateway:
    Type: "AWS::EC2::InternetGateway"
    Properties:
      Tags:
        - Key: Name
          Value:
            Ref: AWS::StackName

  GatewayAttachment:
    Type: "AWS::EC2::VPCGatewayAttachment"
    Properties:
      InternetGatewayId:
        Ref: InternetGateway
      VpcId:
        Ref: VPC

  RouteTable:
    DependsOn: PublicSubnet
    Type: "AWS::EC2::RouteTable"
    Properties:
      Tags:
        - Key: Name
          Value: { Ref: "AWS::StackName" }
      VpcId:
        Ref: VPC

  PublicRoute:
    Type: "AWS::EC2::Route"
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId:
        Ref: InternetGateway
      RouteTableId:
        Ref: RouteTable

  PublicTableAssociation:
    DependsOn: PublicRoute
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    Properties:
      SubnetId:
        Ref: PublicSubnet
      RouteTableId:
        Ref: RouteTable

  SecurityGroup:
    Type: "AWS::EC2::SecurityGroup"
    Properties:
      GroupDescription: Allow user to ssh to host
      VpcId:
        Ref: VPC
      SecurityGroupIngress:
        - # SSH port
          IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0

  CommandHost:
    Type: "AWS::EC2::Instance"
    DependsOn: PublicTableAssociation
    CreationPolicy:
      ResourceSignal:
        Timeout: PT10M
    Properties:
      IamInstanceProfile: !Ref CommandHostInstProfile
      KeyName: !Ref KeyName
      ImageId: !Ref AWSAmiId
      InstanceType: "t3.micro"
      NetworkInterfaces:
        - DeviceIndex: "0"
          AssociatePublicIpAddress: true
          SubnetId:
            Ref: PublicSubnet
          GroupSet:
            - Ref: SecurityGroup
      Tags:
        - Key: "Name"
          Value: "CommandHost"
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash -ex
          yum -y update &&
          yum install -y aws-cli &&

          mkdir /home/ec2-user/.aws &&
          echo "[default]" > /home/ec2-user/.aws/config &&
          echo "region = ${AWS::Region}" >> /home/ec2-user/.aws/config &&
          mkdir -p /home/ssm-user/.aws &&
          echo "[default]" > /home/ssm-user/.aws/config &&
          echo "region = ${AWS::Region}" >> /home/ssm-user/.aws/config &&

          curl -o /home/ec2-user/lambda_function.py https://${AWS::Region}-tcprod.s3.amazonaws.com/${S3PathPrefix}/lambda_function.py &&
          chown ec2-user.ec2-user /home/ec2-user/lambda_function.py &&

          cp /home/ec2-user/lambda_function.py /home/ssm-user/lambda_function.py &&

          /opt/aws/bin/cfn-signal -e $? --stack ${AWS::StackName} --resource CommandHost --region ${AWS::Region}

          until (( $(id -u ssm-user) )); do sleep 10; done 
          chown -R ssm-user:ssm-user /home/ssm-user/

Outputs:
  CommandHost:
    Value: !GetAtt CommandHost.PublicIp
    Description: Public IP of the Command Host
  ConfigRoleARN:
    Value: !GetAtt ConfigRole.Arn
    Description: Role ARN for AWS Config to use
  ConfigS3BucketName:
    Value: !Ref ConfigBucket
    Description: Bucket Name for AWS Config Logging
  ConfigSNSTopic:
    Value: !Ref ConfigSNSTopic
    Description: Topic ARN for AWS Config SNS Topic
  LambdaRoleARN:
    Value: !GetAtt LambdaRole.Arn
    Description: Role ARN for Lambda to use
  DefaultRegionName:
    Value: !Ref AWS::Region
    Description: Default AWS Region
  CommandHostSessionManagementUrl:
    Description: The URL to the Session Management Console for CommandHost
    Value: !Sub https://${AWS::Region}.console.aws.amazon.com/systems-manager/session-manager/${CommandHost}?region=${AWS::Region}
