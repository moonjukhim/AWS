AWSTemplateFormatVersion: 2010-09-09
Description: AWS Federated Authentication with AD FS

Parameters:
  AdministratorPassword:
    Type: String

  WindowsAmiId:
    Type: AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>
    Default: /aws/service/ami-windows-latest/Windows_Server-2019-English-Full-Base

  DomainDNSName:
    Type: String
    Description: DNS Domain for the AD (example.com)
    Default: mydomain.local

  DomainControllerPrivateIp:
    Type: String
    Description: Fixed private IP for the Domain Controller located in AZ1.
    Default: 10.0.0.10

  ADFSPrivateIp:
    Type: String
    Description: Fixed private IP for the AD FS server located in AZ1.
    Default: 10.0.0.15

  LatestLinuxAmiId:
    Type: "AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>"
    Default: "/aws/service/ami-amazon-linux-latest/amzn2-ami-hvm-x86_64-gp2"

  LinuxInstanceType:
    Type: String
    Default: t3.small

Resources:
  LabVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsHostnames: true
      EnableDnsSupport: true
      Tags:
        - Key: Name
          Value: Lab VPC

  InternetGateway:
    Type: AWS::EC2::InternetGateway

  AttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref LabVPC
      InternetGatewayId: !Ref InternetGateway

  NatElasticIP:
    Type: AWS::EC2::EIP
    Properties:
      Domain: !Ref LabVPC

  NatGateway:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt NatElasticIP.AllocationId
      SubnetId: !Ref PublicSubnet

  PublicSubnet:
    Type: AWS::EC2::Subnet
    DependsOn: AttachGateway
    Properties:
      VpcId: !Ref LabVPC
      CidrBlock: 10.0.32.0/20
      MapPublicIpOnLaunch: true
      AvailabilityZone: !Select
        - 0
        - !GetAZs
      Tags:
        - Key: Name
          Value: Public Subnet

  PrivateSubnet:
    DependsOn: AttachGateway
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref LabVPC
      CidrBlock: 10.0.0.0/19
      AvailabilityZone: !Select
        - 0
        - !GetAZs
      Tags:
        - Key: Name
          Value: Private Subnet

  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    DependsOn: PublicSubnet
    Properties:
      VpcId: !Ref LabVPC
      Tags:
        - Key: Name
          Value: Public Route Table

  PrivateRouteTable:
    Type: AWS::EC2::RouteTable
    DependsOn: PrivateSubnet
    Properties:
      VpcId: !Ref LabVPC
      Tags:
        - Key: Network
          Value: Private Route Table

  PublicRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  PrivateRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGateway

  PublicSubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    DependsOn: PublicRoute
    Properties:
      SubnetId: !Ref PublicSubnet
      RouteTableId: !Ref PublicRouteTable

  PrivateSubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    DependsOn: PrivateRoute
    Properties:
      SubnetId: !Ref PrivateSubnet
      RouteTableId: !Ref PrivateRouteTable

  EC2Role:
    Type: AWS::IAM::Role
    Properties:
      RoleName: EC2Role
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Action:
              - sts:AssumeRole
            Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
      Policies:
        - PolicyName: EC2RolePolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Action:
                  - ec2:DescribeInstances
                  - elasticloadbalancing:DescribeLoadBalancers
                  - elasticloadbalancing:RegisterInstancesWithLoadBalancer
                Effect: Allow
                Resource: "*"

  EC2InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Roles:
        - !Ref EC2Role

  ##Instance Profile Resources
  instanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      InstanceProfileName: !Ref ssmManagedRole
      Roles:
        - !Ref ssmManagedRole
  ssmManagedRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Action:
              - sts:AssumeRole
            Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore
        - arn:aws:iam::aws:policy/ReadOnlyAccess

  AllTrafficSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Enable All Inbound Traffic
      VpcId: !Ref LabVPC
      SecurityGroupIngress:
        - IpProtocol: "-1"
          FromPort: -1
          ToPort: -1
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: AllTrafficSecurityGroup

  DomainController:
    Type: AWS::EC2::Instance
    CreationPolicy:
      ResourceSignal:
        Count: 1
        Timeout: PT15M
    DependsOn:
      - PrivateSubnetRouteTableAssociation
    Metadata:
      AWS::CloudFormation::Init:
        config:
          commands:
            1-Change-Password:
              command: !Sub net user Administrator "${AdministratorPassword}"
              waitAfterCompletion: 0
            2-Rename-Computer:
              command: powershell.exe -Command "Rename-Computer -NewName DC1 -Restart"
              waitAfterCompletion: forever
            3-Install-Domain-Controller:
              command: !Sub powershell.exe -Command "Install-WindowsFeature -Name AD-Domain-Services -IncludeManagementTools; Import-Module ADDSDeployment; Install-ADDSForest -DomainName '${DomainDNSName}' -DomainMode Win2008R2 -ForestMode Win2008R2 -SafeModeAdministratorPassword (ConvertTo-SecureString -String '${AdministratorPassword}' -AsPlainText -Force) -Force"
              waitAfterCompletion: forever
    Properties:
      IamInstanceProfile: !Ref EC2InstanceProfile
      ImageId: !Ref WindowsAmiId
      InstanceType: m5.large
      PrivateIpAddress: !Ref DomainControllerPrivateIp
      SecurityGroupIds:
        - !Ref AllTrafficSecurityGroup
      SubnetId: !Ref PrivateSubnet
      Tags:
        - Key: Name
          Value: DC
      UserData:
        Fn::Base64: !Sub |
          <script>
            cfn-init.exe -v --stack ${AWS::StackName} --region ${AWS::Region} --resource DomainController
            cfn-signal.exe --stack ${AWS::StackName} --region ${AWS::Region} --resource DomainController --exit-code %ERRORLEVEL%
          </script>

  ADFS:
    Type: AWS::EC2::Instance
    CreationPolicy:
      ResourceSignal:
        Count: 1
        Timeout: PT15M
    DependsOn:
      - PrivateSubnetRouteTableAssociation
    Metadata:
      AWS::CloudFormation::Init:
        config:
          commands:
            1-Change-Password:
              command: !Sub net user Administrator "${AdministratorPassword}"
              waitAfterCompletion: 0
            2-Install-Chocolatey:
              command: powershell.exe -Command "iex ((New-Object System.Net.WebClient).DownloadString('https://chocolatey.org/install.ps1'))"
              waitAfterCompletion: 0
            3-Install-Chrome:
              command: C:\ProgramData\chocolatey\bin\choco.exe install googlechrome --yes --no-progress --ignore-checksums
              waitAfterCompletion: 0
    Properties:
      IamInstanceProfile: !Ref EC2InstanceProfile
      ImageId: !Ref WindowsAmiId
      InstanceType: m5.large
      PrivateIpAddress: !Ref ADFSPrivateIp
      SecurityGroupIds:
        - !Ref AllTrafficSecurityGroup
      SubnetId: !Ref PrivateSubnet
      Tags:
        - Key: Name
          Value: ADFS
      UserData:
        Fn::Base64: !Sub |
          <script>
            cfn-init.exe -v --stack ${AWS::StackName} --region ${AWS::Region} --resource ADFS
            cfn-signal.exe --stack ${AWS::StackName} --region ${AWS::Region} --resource ADFS --exit-code %ERRORLEVEL%
          </script>

  httpSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security Group that allows port 80 in from everywhere
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
        - IpProtocol: tcp
          FromPort: 0
          ToPort: 65535
          CidrIp: 0.0.0.0/0
        - IpProtocol: udp
          FromPort: 0
          ToPort: 65535
          CidrIp: 0.0.0.0/0
      VpcId: !Ref LabVPC

  ADFSViewEC2Role:
    Type: AWS::IAM::Role
    Properties:
      RoleName: AWS-View-EC2
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Action:
              - sts:AssumeRoleWithSAML
            Effect: Allow
            Principal:
              Federated: !Sub arn:aws:iam::${AWS::AccountId}:saml-provider/ADFS
            Condition:
              StringEquals:
                SAML:aud: https://signin.aws.amazon.com/saml
      Policies:
        - PolicyName: adfs-role
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Action:
                  - ec2:Get*
                  - ec2:Describe*
                  - ec2:List*
                Effect: Allow
                Resource: "*"
              - Action:
                  - ec2:RunInstances
                  - ec2:StartInstances
                Effect: Deny
                Resource: arn:aws:ec2:*:*:instance/*
              - Action:
                  - ec2:*Spot*
                Effect: Deny
                Resource: "*"

  ADFSViewS3Role:
    Type: AWS::IAM::Role
    Properties:
      RoleName: AWS-View-S3
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Action:
              - sts:AssumeRoleWithSAML
            Effect: Allow
            Principal:
              Federated: !Sub arn:aws:iam::${AWS::AccountId}:saml-provider/ADFS
            Condition:
              StringEquals:
                SAML:aud: https://signin.aws.amazon.com/saml
      Policies:
        - PolicyName: adfs-role
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Action:
                  - s3:Get*
                  - s3:Describe*
                  - s3:List*
                Effect: Allow
                Resource: "*"

  ADFSBucket:
    Type: AWS::S3::Bucket

  ##Guacamole Instance
  guacamoleInstance:
    DependsOn: PublicSubnetRouteTableAssociation
    Type: AWS::EC2::Instance
    CreationPolicy:
      ResourceSignal:
        Count: 1
        Timeout: PT15M
    Metadata:
      AWS::CloudFormation::Init:
        config:
          files:
            /guacamole-home/guacamole.properties:
              content: |
                user-mapping: /guacamole-home/user-mapping.xml
              mode: "000644"
              owner: "root"
              group: "root"
            /guacamole-home/user-mapping.xml:
              content: !Sub
                - |
                  <user-mapping>
                    <authorize username="awsstudent-DC" password="${EscapedPassword}">
                      <protocol>rdp</protocol>
                      <param name="hostname">${DomainController.PrivateIp}</param>
                      <param name="username">Administrator</param>
                      <param name="password">${EscapedPassword}</param>
                      <param name="security">any</param>
                      <param name="ignore-cert">true</param>
                    </authorize>
                    <authorize username="awsstudent-ADFS" password="${EscapedPassword}">
                      <protocol>rdp</protocol>
                      <param name="hostname">${ADFS.PrivateIp}</param>
                      <param name="username">Administrator</param>
                      <param name="password">${EscapedPassword}</param>
                      <param name="security">any</param>
                      <param name="ignore-cert">true</param>
                    </authorize>
                  </user-mapping>
                - EscapedPassword: !Join
                    - "&lt;"
                    - !Split
                        - "<"
                        - !Join
                            - "&amp;"
                            - !Split
                                - "&"
                                - !Ref AdministratorPassword
              mode: "000644"
              owner: "root"
              group: "root"
    Properties:
      IamInstanceProfile: !Ref instanceProfile
      ImageId: !Ref LatestLinuxAmiId
      InstanceType: !Ref LinuxInstanceType
      SubnetId: !Ref PublicSubnet
      SecurityGroupIds:
        - !Ref httpSG
      Tags:
        - Key: Name
          Value: Apache Guacamole Server
        - Key: EC2Connect
          Value: "true"
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash -xe
          yum update -y aws-cfn-bootstrap
          /opt/aws/bin/cfn-init --stack ${AWS::StackName} --region ${AWS::Region} --resource guacamoleInstance
          /opt/aws/bin/cfn-signal --stack ${AWS::StackName} --region ${AWS::Region} --resource guacamoleInstance --exit-code $?
  installGuacDoc:
    Type: AWS::SSM::Document
    Properties:
      DocumentType: Command
      Content:
        schemaVersion: "2.2"
        description: "Install Visual Studio IDE and set the environment"
        mainSteps:
          - name: installDocker
            action: aws:configureDocker
            inputs:
              action: Install
          - name: loadImages
            action: aws:runShellScript
            inputs:
              runCommand:
                - aws s3 cp s3://aws-tc-largeobjects/AWS-200-DEV/v4.0/guacd.tar - | sudo docker image load
                - aws s3 cp s3://aws-tc-largeobjects/AWS-200-DEV/v4.0/guacamole.tar - | sudo docker image load
          - name: runGuacImages
            action: aws:runShellScript
            inputs:
              runCommand:
                - docker run --name guacd -d guacamole/guacd:1.3.0
                - docker run --name guacamole --link guacd:guacd -v /guacamole-home:/guacamole-home -e GUACAMOLE_HOME=/guacamole-home -d -p 80:8080 guacamole/guacamole:1.3.0
  guacAssociation:
    Type: AWS::SSM::Association
    Properties:
      Name: !Ref installGuacDoc
      Targets:
        - Key: InstanceIds
          Values:
            - !Ref guacamoleInstance
Outputs:
  ADFSPrivateIp:
    Value: !Ref ADFSPrivateIp

  ADFSViewEC2Role:
    Value: !GetAtt ADFSViewEC2Role.Arn

  ADFSViewS3Role:
    Value: !GetAtt ADFSViewS3Role.Arn

  DomainControllerPrivateIP:
    Value: !Ref DomainControllerPrivateIp

  GuacamoleLink:
    Value: !Sub http://${guacamoleInstance.PublicIp}/guacamole

  Region:
    Value: !Ref AWS::Region
